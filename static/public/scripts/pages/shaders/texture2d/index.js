// Generated by purs bundle 0.14.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var discard = function (dict) {
      return dict.discard;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["catchError"] = catchError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var monadTransExceptT = {
      lift: function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
              });
          };
      }
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var except = function (dictApplicative) {
      var $89 = Control_Applicative.pure(dictApplicative);
      return function ($90) {
          return ExceptT($89($90));
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var monadErrorExceptT = function (dictMonad) {
      return {
          catchError: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                      var v1 = k(a);
                      return v1;
                  })((function () {
                      var $105 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($106) {
                          return $105(Data_Either.Right.create($106));
                      };
                  })()));
              };
          },
          MonadThrow0: function () {
              return monadThrowExceptT(dictMonad);
          }
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  exports["eqInt"] = eqInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  exports["ordInt"] = ordInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function(exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  exports["traverse_"] = traverse_;
  exports["sum"] = sum;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];  
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["max"] = $foreign.max;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Window.Canvas.Main

  exports.getWebGLContextImpl = function (canvas) {
    return function () {
      return canvas.getContext('webgl');
    };
  };

  exports.getClientWidthImpl = function (canvas) {
    return function () {
      return canvas.clientWidth;
    };
  };

  exports.getClientHeightImpl = function (canvas) {
    return function () {
      return canvas.clientHeight;
    };
  };

  exports.resizeImpl = function (canvas) {
    return function () {
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
    };
  };
})(PS["Lib.Window.Canvas.Main"] = PS["Lib.Window.Canvas.Main"] || {});
(function(exports) {
  'use strict';

  // module Graphics.WebGL.Raw.Util

  exports.fromImpl = function (Nothing, Just, x) {
    if (x === undefined || x === null) {
      return Nothing;
    } else {
      return Just(x);
    }
  };
})(PS["Lib.Maybe.Main"] = PS["Lib.Maybe.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Maybe.Main"] = $PS["Lib.Maybe.Main"] || {};
  var exports = $PS["Lib.Maybe.Main"];
  var $foreign = $PS["Lib.Maybe.Main"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var from = function (x) {
      return $foreign.fromImpl(Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["from"] = from;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.Canvas.Main"] = $PS["Lib.Window.Canvas.Main"] || {};
  var exports = $PS["Lib.Window.Canvas.Main"];
  var $foreign = $PS["Lib.Window.Canvas.Main"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Lib_Maybe_Main = $PS["Lib.Maybe.Main"];                
  var resize = $foreign.resizeImpl;
  var getWebGLContext = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Lib_Maybe_Main.from);
      return function ($1) {
          return $0($foreign.getWebGLContextImpl($1));
      };
  })();
  var getClientWidth = $foreign.getClientWidthImpl;
  var getClientHeight = $foreign.getClientHeightImpl;
  exports["getWebGLContext"] = getWebGLContext;
  exports["getClientWidth"] = getClientWidth;
  exports["getClientHeight"] = getClientHeight;
  exports["resize"] = resize;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Canvas.Main"] = $PS["Lib.Canvas.Main"] || {};
  var exports = $PS["Lib.Canvas.Main"];
  var Lib_Window_Canvas_Main = $PS["Lib.Window.Canvas.Main"];                
  var getDimension = function (canvas) {
      return function __do() {
          var width = Lib_Window_Canvas_Main.getClientWidth(canvas)();
          var height = Lib_Window_Canvas_Main.getClientHeight(canvas)();
          return {
              width: width,
              height: height
          };
      };
  };
  exports["getDimension"] = getDimension;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.ExceptT.Main"] = $PS["Lib.ExceptT.Main"] || {};
  var exports = $PS["Lib.ExceptT.Main"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromMaybeTrans = function (dictMonad) {
      return function (l) {
          return function (mmx) {
              return Control_Monad_Except_Trans.ExceptT((function () {
                  var el = new Data_Either.Left(l);
                  return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Maybe.maybe(el)(Data_Either.Right.create))(mmx);
              })());
          };
      };
  };
  exports["fromMaybeTrans"] = fromMaybeTrans;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Float32Array.Main

  exports.fromArrayImpl = function (xs) {
    return function () {
      return new Float32Array(xs);
    };
  };

  exports.toArrayBufferImpl = function (xs) {
    return xs;
  };
})(PS["Lib.Float32Array.Main"] = PS["Lib.Float32Array.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Float32Array.Main"] = $PS["Lib.Float32Array.Main"] || {};
  var exports = $PS["Lib.Float32Array.Main"];
  var $foreign = $PS["Lib.Float32Array.Main"];
  var toArrayBuffer = $foreign.toArrayBufferImpl;
  var fromArray = $foreign.fromArrayImpl;
  exports["fromArray"] = fromArray;
  exports["toArrayBuffer"] = toArrayBuffer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Graphics.Models.Rectangle.Main"] = $PS["Lib.Graphics.Models.Rectangle.Main"] || {};
  var exports = $PS["Lib.Graphics.Models.Rectangle.Main"];
  var toArray = function (model) {
      var y2 = model.y + model.height;
      var x2 = model.x + model.width;
      return [ model.x, model.y, x2, model.y, model.x, y2, model.x, y2, x2, model.y, x2, y2 ];
  };
  exports["toArray"] = toArray;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Window.Image.Main

  exports.fromUrlImpl = function (url) {
    return function (onError, onSuccess) {
      try {
        const image = new Image();
        image.src = url;
        image.onload = () => onSuccess(image);
      } catch (e) {
        onError(e);
      }
      return function (error, onCancelError, onCancelSuccess) {
        onCancelSuccess();
      };
    };
  };

  exports.toTexImageSourceImpl = function (image) {
    return image;
  }

  exports.getWidthImpl = function (image) {
    return function () {
      return image.width;
    };
  };

  exports.getHeightImpl = function (image) {
    return function () {
      return image.height;
    };
  };
})(PS["Lib.Window.Image.Main"] = PS["Lib.Window.Image.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.Image.Main"] = $PS["Lib.Window.Image.Main"] || {};
  var exports = $PS["Lib.Window.Image.Main"];
  var $foreign = $PS["Lib.Window.Image.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];                
  var toTexImageSource = $foreign.toTexImageSourceImpl;
  var getWidth = $foreign.getWidthImpl;
  var getHeight = $foreign.getHeightImpl;
  var fromUrl = function (url) {
      return Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_Compat.fromEffectFnAff($foreign.fromUrlImpl(url)))(function (image) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right(image));
      }))(function (v) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create("Unable to load image from " + url));
      });
  };
  exports["fromUrl"] = fromUrl;
  exports["toTexImageSource"] = toTexImageSource;
  exports["getWidth"] = getWidth;
  exports["getHeight"] = getHeight;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Image.Main"] = $PS["Lib.Image.Main"] || {};
  var exports = $PS["Lib.Image.Main"];
  var Lib_Window_Image_Main = $PS["Lib.Window.Image.Main"];                
  var getDimension = function (canvas) {
      return function __do() {
          var width = Lib_Window_Image_Main.getWidth(canvas)();
          var height = Lib_Window_Image_Main.getHeight(canvas)();
          return {
              width: width,
              height: height
          };
      };
  };
  exports["getDimension"] = getDimension;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Kernel.Main"] = $PS["Lib.Kernel.Main"] || {};
  var exports = $PS["Lib.Kernel.Main"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Semiring = $PS["Data.Semiring"];
  var $$Math = $PS["Math"];                                                
  var toWeight = (function () {
      var $2 = $$Math.max(1.0);
      var $3 = Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringNumber);
      return function ($4) {
          return $2($3($4));
      };
  })();
  var sharpness1 = [ 0.0, -1.0, 0.0, -1.0, 5.0, -1.0, 0.0, -1.0, 0.0 ];
  exports["toWeight"] = toWeight;
  exports["sharpness1"] = sharpness1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.WebGL.Constants"] = $PS["Lib.Window.WebGL.Constants"] || {};
  var exports = $PS["Lib.Window.WebGL.Constants"];
  var vertexShader = 35633;
  var unsignedByte = 5121;   
  var triangles = 4;  
  var textureWrapT = 10243;
  var textureWrapS = 10242;
  var textureMinFilter = 10241;
  var textureMagFilter = 10240;
  var texture2d = 3553;         
  var staticDraw = 35044;
  var rgba = 6408;               
  var nearest = 9728;  
  var linkStatus = 35714; 
  var fragmentShader = 35632;
  var $$float = 5126;        
  var depthBufferBit = 256;            
  var compileStatus = 35713; 
  var colorBufferBit = 16384;  
  var clampToEdge = 33071;       
  var arrayBuffer = 34962;
  exports["arrayBuffer"] = arrayBuffer;
  exports["clampToEdge"] = clampToEdge;
  exports["colorBufferBit"] = colorBufferBit;
  exports["compileStatus"] = compileStatus;
  exports["depthBufferBit"] = depthBufferBit;
  exports["float"] = $$float;
  exports["fragmentShader"] = fragmentShader;
  exports["linkStatus"] = linkStatus;
  exports["nearest"] = nearest;
  exports["rgba"] = rgba;
  exports["staticDraw"] = staticDraw;
  exports["texture2d"] = texture2d;
  exports["textureMagFilter"] = textureMagFilter;
  exports["textureMinFilter"] = textureMinFilter;
  exports["textureWrapS"] = textureWrapS;
  exports["textureWrapT"] = textureWrapT;
  exports["triangles"] = triangles;
  exports["unsignedByte"] = unsignedByte;
  exports["vertexShader"] = vertexShader;
})(PS);
(function(exports) {
  'use strict';

  exports.attachShaderImpl = function (webgl, program, shader) {
    return function () {
      return webgl.attachShader(program, shader);
    };
  };

  exports.bindBufferImpl = function (webgl, target, buffer) {
    return function () {
      return webgl.bindBuffer(target, buffer);
    };
  };

  exports.bindTextureImpl = function (webgl, target, texture) {
    return function () {
      return webgl.bindTexture(target, texture);
    };
  };

  exports.bufferDataImpl = function (webgl, target, data, usage) {
    return function () {
      return webgl.bufferData(target, data, usage);
    };
  };

  exports.clearImpl = function (webgl, mask) {
    return function () {
      return webgl.clear(mask);
    };
  };

  exports.clearColorImpl = function (webgl, red, green, blue, alpha) {
    return function () {
      return webgl.clearColor(red, green, blue, alpha);
    };
  };

  exports.compileShaderImpl = function (webgl, shader) {
    return function () {
      return webgl.compileShader(shader);
    };
  };

  exports.createBufferImpl = function (webgl) {
    return function () {
      return webgl.createBuffer();
    };
  };

  exports.createProgramImpl = function (webgl) {
    return function () {
      return webgl.createProgram();
    };
  };

  exports.createShaderImpl = function (webgl, type) {
    return function () {
      return webgl.createShader(type);
    };
  };

  exports.createTextureImpl = function (webgl) {
    return function () {
      return webgl.createTexture();
    };
  };

  exports.deleteProgramImpl = function (webgl, program) {
    return function () {
      return webgl.deleteProgram(program);
    };
  };

  exports.deleteShaderImpl = function (webgl, shader) {
    return function () {
      return webgl.deleteShader(shader);
    };
  };

  exports.drawArraysImpl = function (webgl, mode, first, count) {
    return function () {
      return webgl.drawArrays(mode, first, count);
    };
  };

  exports.enableVertexAttribArrayImpl = function (webgl, index) {
    return function () {
      return webgl.enableVertexAttribArray(index);
    };
  };

  exports.getAttribLocationImpl = function (webgl, program, name) {
    return function () {
      return webgl.getAttribLocation(program, name);
    };
  };

  exports.getProgramParameterImpl = function (webgl, program, pname) {
    return function () {
      return webgl.getProgramParameter(program, pname);
    };
  };

  exports.getShaderParameterImpl = function (webgl, shader, pname) {
    return function () {
      return webgl.getShaderParameter(shader, pname);
    };
  };

  exports.getUniformLocationImpl = function (webgl, program, name) {
    return function () {
      return webgl.getUniformLocation(program, name);
    };
  };

  exports.linkProgramImpl = function (webgl, program) {
    return function () {
      return webgl.linkProgram(program);
    };
  };

  exports.shaderSourceImpl = function (webgl, shader, source) {
    return function () {
      return webgl.shaderSource(shader, source);
    };
  };

  exports.texImage2DImpl = function (
    webgl,
    target,
    level,
    internalformat,
    format,
    type,
    source
  ) {
    return function () {
      return webgl.texImage2D(
        target,
        level,
        internalformat,
        format,
        type,
        source
      );
    };
  };

  exports.texParameteriImpl = function (webgl, target, pname, param) {
    return function () {
      return webgl.texParameteri(target, pname, param);
    };
  };

  exports.uniform1fImpl = function (webgl, location, x) {
    return function () {
      return webgl.uniform1f(location, x);
    };
  };

  exports.uniform1fvImpl = function (webgl, location, v) {
    return function () {
      return webgl.uniform1fv(location, v);
    };
  };

  exports.uniform2fImpl = function (webgl, location, x, y) {
    return function () {
      return webgl.uniform2f(location, x, y);
    };
  };

  exports.useProgramImpl = function (webgl, program) {
    return function () {
      return webgl.useProgram(program);
    };
  };

  exports.vertexAttribPointerImpl = function (
    webgl,
    indx,
    size,
    type,
    normalized,
    stride,
    offset
  ) {
    return function () {
      return webgl.vertexAttribPointer(
        indx,
        size,
        type,
        normalized,
        stride,
        offset
      );
    };
  };

  exports.viewportImpl = function (webgl, x, y, width, height) {
    return function () {
      return webgl.viewport(x, y, width, height);
    };
  };

  exports.getCanvasImpl = function(webgl) {
    return function() {
      return webgl.canvas;
    }
  }
})(PS["Lib.Window.WebGL.Main"] = PS["Lib.Window.WebGL.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.WebGL.Main"] = $PS["Lib.Window.WebGL.Main"] || {};
  var exports = $PS["Lib.Window.WebGL.Main"];
  var $foreign = $PS["Lib.Window.WebGL.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect = $PS["Effect"];
  var Lib_Maybe_Main = $PS["Lib.Maybe.Main"];                                
  var viewport = function (webgl) {
      return function (x) {
          return function (y) {
              return function (width) {
                  return function (height) {
                      return $foreign.viewportImpl(webgl, x, y, width, height);
                  };
              };
          };
      };
  };
  var vertexAttribPointer = function (webgl) {
      return function (indx) {
          return function (size) {
              return function (type$prime) {
                  return function (normalized) {
                      return function (stride) {
                          return function (offset) {
                              return $foreign.vertexAttribPointerImpl(webgl, indx, size, type$prime, normalized, stride, offset);
                          };
                      };
                  };
              };
          };
      };
  };
  var useProgram = function (webgl) {
      return function (program) {
          return $foreign.useProgramImpl(webgl, program);
      };
  };
  var uniform2f = function (webgl) {
      return function (location) {
          return function (x) {
              return function (y) {
                  return $foreign.uniform2fImpl(webgl, location, x, y);
              };
          };
      };
  };
  var uniform1fv = function (webgl) {
      return function (location) {
          return function (v) {
              return $foreign.uniform1fvImpl(webgl, location, v);
          };
      };
  };
  var uniform1f = function (webgl) {
      return function (location) {
          return function (x) {
              return $foreign.uniform1fImpl(webgl, location, x);
          };
      };
  };
  var texParameteri = function (webgl) {
      return function (target) {
          return function (pname) {
              return function (param) {
                  return $foreign.texParameteriImpl(webgl, target, pname, param);
              };
          };
      };
  };
  var texImage2D = function (webgl) {
      return function (target) {
          return function (level) {
              return function (internalformat) {
                  return function (format) {
                      return function (type$prime) {
                          return function (source) {
                              return $foreign.texImage2DImpl(webgl, target, level, internalformat, format, type$prime, source);
                          };
                      };
                  };
              };
          };
      };
  };
  var shaderSource = function (webgl) {
      return function (shader) {
          return function (source) {
              return $foreign.shaderSourceImpl(webgl, shader, source);
          };
      };
  };
  var linkProgram = function (webgl) {
      return function (program) {
          return $foreign.linkProgramImpl(webgl, program);
      };
  };
  var getUniformLocation = function (webgl) {
      return function (program) {
          return function (name) {
              return Control_Bind.bind(Effect.bindEffect)($foreign.getUniformLocationImpl(webgl, program, name))((function () {
                  var $2 = Control_Applicative.pure(Effect.applicativeEffect);
                  return function ($3) {
                      return $2(Lib_Maybe_Main.from($3));
                  };
              })());
          };
      };
  };
  var getShaderParameter = function (webgl) {
      return function (shader) {
          return function (pname) {
              return Control_Bind.bind(Effect.bindEffect)($foreign.getShaderParameterImpl(webgl, shader, pname))((function () {
                  var $14 = Control_Applicative.pure(Effect.applicativeEffect);
                  return function ($15) {
                      return $14(Lib_Maybe_Main.from($15));
                  };
              })());
          };
      };
  };
  var getProgramParameter = function (webgl) {
      return function (program) {
          return function (pname) {
              return Control_Bind.bind(Effect.bindEffect)($foreign.getProgramParameterImpl(webgl, program, pname))((function () {
                  var $20 = Control_Applicative.pure(Effect.applicativeEffect);
                  return function ($21) {
                      return $20(Lib_Maybe_Main.from($21));
                  };
              })());
          };
      };
  };
  var getCanvas = $foreign.getCanvasImpl;
  var getAttribLocation = function (webgl) {
      return function (program) {
          return function (name) {
              return $foreign.getAttribLocationImpl(webgl, program, name);
          };
      };
  };
  var enableVertexAttribArray = function (webgl) {
      return function (index) {
          return $foreign.enableVertexAttribArrayImpl(webgl, index);
      };
  };
  var drawArrays = function (webgl) {
      return function (mode) {
          return function (first) {
              return function (count) {
                  return $foreign.drawArraysImpl(webgl, mode, first, count);
              };
          };
      };
  };
  var deleteShader = function (webgl) {
      return function (shader) {
          return $foreign.deleteShaderImpl(webgl, shader);
      };
  };
  var deleteProgram = function (webgl) {
      return function (program) {
          return $foreign.deleteProgramImpl(webgl, program);
      };
  };
  var createTexture = function (webgl) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.createTextureImpl(webgl))((function () {
          var $40 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($41) {
              return $40(Lib_Maybe_Main.from($41));
          };
      })());
  };
  var createShader = function (webgl) {
      return function (type$prime) {
          return Control_Bind.bind(Effect.bindEffect)($foreign.createShaderImpl(webgl, type$prime))((function () {
              var $42 = Control_Applicative.pure(Effect.applicativeEffect);
              return function ($43) {
                  return $42(Lib_Maybe_Main.from($43));
              };
          })());
      };
  };
  var createProgram = function (webgl) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.createProgramImpl(webgl))((function () {
          var $46 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($47) {
              return $46(Lib_Maybe_Main.from($47));
          };
      })());
  };
  var createBuffer = function (webgl) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.createBufferImpl(webgl))((function () {
          var $50 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($51) {
              return $50(Lib_Maybe_Main.from($51));
          };
      })());
  };
  var compileShader = function (webgl) {
      return function (shader) {
          return $foreign.compileShaderImpl(webgl, shader);
      };
  };
  var clearColor = function (webgl) {
      return function (red) {
          return function (green) {
              return function (blue) {
                  return function (alpha) {
                      return $foreign.clearColorImpl(webgl, red, green, blue, alpha);
                  };
              };
          };
      };
  };
  var clear = function (webgl) {
      return function (mask) {
          return $foreign.clearImpl(webgl, mask);
      };
  };
  var bufferData = function (webgl) {
      return function (target) {
          return function (data$prime) {
              return function (usage) {
                  return $foreign.bufferDataImpl(webgl, target, data$prime, usage);
              };
          };
      };
  };
  var bindTexture = function (webgl) {
      return function (target) {
          return function (texture) {
              return $foreign.bindTextureImpl(webgl, target, texture);
          };
      };
  };
  var bindBuffer = function (webgl) {
      return function (target) {
          return function (buffer) {
              return $foreign.bindBufferImpl(webgl, target, buffer);
          };
      };
  };
  var attachShader = function (webgl) {
      return function (program) {
          return function (shader) {
              return $foreign.attachShaderImpl(webgl, program, shader);
          };
      };
  };
  exports["attachShader"] = attachShader;
  exports["bindBuffer"] = bindBuffer;
  exports["bindTexture"] = bindTexture;
  exports["bufferData"] = bufferData;
  exports["clear"] = clear;
  exports["clearColor"] = clearColor;
  exports["compileShader"] = compileShader;
  exports["createBuffer"] = createBuffer;
  exports["createProgram"] = createProgram;
  exports["createShader"] = createShader;
  exports["createTexture"] = createTexture;
  exports["deleteProgram"] = deleteProgram;
  exports["deleteShader"] = deleteShader;
  exports["drawArrays"] = drawArrays;
  exports["enableVertexAttribArray"] = enableVertexAttribArray;
  exports["getAttribLocation"] = getAttribLocation;
  exports["getProgramParameter"] = getProgramParameter;
  exports["getShaderParameter"] = getShaderParameter;
  exports["getUniformLocation"] = getUniformLocation;
  exports["linkProgram"] = linkProgram;
  exports["shaderSource"] = shaderSource;
  exports["texImage2D"] = texImage2D;
  exports["texParameteri"] = texParameteri;
  exports["uniform1f"] = uniform1f;
  exports["uniform1fv"] = uniform1fv;
  exports["uniform2f"] = uniform2f;
  exports["useProgram"] = useProgram;
  exports["vertexAttribPointer"] = vertexAttribPointer;
  exports["viewport"] = viewport;
  exports["getCanvas"] = getCanvas;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.WebGL.Main"] = $PS["Lib.WebGL.Main"] || {};
  var exports = $PS["Lib.WebGL.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Effect = $PS["Effect"];
  var Lib_Canvas_Main = $PS["Lib.Canvas.Main"];
  var Lib_ExceptT_Main = $PS["Lib.ExceptT.Main"];
  var Lib_Window_Canvas_Main = $PS["Lib.Window.Canvas.Main"];
  var Lib_Window_WebGL_Constants = $PS["Lib.Window.WebGL.Constants"];
  var Lib_Window_WebGL_Main = $PS["Lib.Window.WebGL.Main"];                
  var viewport = function (x) {
      return function (y) {
          return function (width) {
              return function (height) {
                  return function (webgl) {
                      return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.viewport(webgl)(x)(y)(width)(height));
                  };
              };
          };
      };
  };
  var vertexAttribPointer = function (indx) {
      return function (size) {
          return function (type$prime) {
              return function (normalized) {
                  return function (stride) {
                      return function (offset) {
                          return function (webgl) {
                              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.vertexAttribPointer(webgl)(indx)(size)(type$prime)(normalized)(stride)(offset));
                          };
                      };
                  };
              };
          };
      };
  };
  var useProgram = function (program) {
      return function (webgl) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.useProgram(webgl)(program));
      };
  };
  var uniform2f = function (x) {
      return function (y) {
          return function (location) {
              return function (webgl) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.uniform2f(webgl)(location)(x)(y));
              };
          };
      };
  };
  var uniform1fv = function (xs) {
      return function (location) {
          return function (webgl) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.uniform1fv(webgl)(location)(xs));
          };
      };
  };
  var uniform1f = function (x) {
      return function (location) {
          return function (webgl) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.uniform1f(webgl)(location)(x));
          };
      };
  };
  var texParameteri = function (target) {
      return function (pname) {
          return function (param) {
              return function (webgl) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.texParameteri(webgl)(target)(pname)(param));
              };
          };
      };
  };
  var texImage2d = function (target) {
      return function (level) {
          return function (internalFormat) {
              return function (format) {
                  return function (type$prime) {
                      return function (source) {
                          return function (webgl) {
                              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.texImage2D(webgl)(target)(level)(internalFormat)(format)(type$prime)(source));
                          };
                      };
                  };
              };
          };
      };
  };
  var setTexture2dConfig = function (config) {
      return function (webgl) {
          return texParameteri(Lib_Window_WebGL_Constants.texture2d)(config.pname)(config.param)(webgl);
      };
  };
  var setTexture2dConfigs = function (configs) {
      return function (webgl) {
          return Data_Function.flip(Data_Foldable.traverse_(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Foldable.foldableArray))(configs)(function (config) {
              return setTexture2dConfig(config)(webgl);
          });
      };
  };
  var putTexture2d = function (params) {
      return function (webgl) {
          return texImage2d(Lib_Window_WebGL_Constants.texture2d)(params.level)(params.internalFormat)(params.format)(params.type)(params.source)(webgl);
      };
  };
  var getUniformLocation = function (name) {
      return function (program) {
          return function (webgl) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to locate uniform")(Lib_Window_WebGL_Main.getUniformLocation(webgl)(program)(name)))(function (uniform) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(uniform);
              });
          };
      };
  };
  var getCanvas = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.getCanvas(webgl)))(function (canvas) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(canvas);
      });
  };
  var getCanvasDimension = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(getCanvas(webgl))(function (canvas) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Canvas_Main.getDimension(canvas)))(function (dimension) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(dimension);
          });
      });
  };
  var getAttribLocation = function (name) {
      return function (program) {
          return function (webgl) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.getAttribLocation(webgl)(program)(name)))(function (attribute) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(attribute);
              });
          };
      };
  };
  var enableVertexAttribArray = function (index) {
      return function (webgl) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.enableVertexAttribArray(webgl)(index));
      };
  };
  var setAttributeConfig = function (config) {
      return function (webgl) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(enableVertexAttribArray(config.index)(webgl))(function () {
              return vertexAttribPointer(config.index)(config.size)(config.type)(config.normalize)(config.stride)(config.offset)(webgl);
          });
      };
  };
  var drawArrays = function (mode) {
      return function (first) {
          return function (count) {
              return function (webgl) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.drawArrays(webgl)(mode)(first)(count));
              };
          };
      };
  };
  var renderArray = function (config) {
      return function (webgl) {
          return drawArrays(config.mode)(config.first)(config.count)(webgl);
      };
  };
  var createVertexShader = function (source) {
      return function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to initialize vertex shader")(Lib_Window_WebGL_Main.createShader(webgl)(Lib_Window_WebGL_Constants.vertexShader)))(function (shader) {
              return Control_Monad_Error_Class.catchError(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.shaderSource(webgl)(shader)(source)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.compileShader(webgl)(shader)))(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to find status")(Lib_Window_WebGL_Main.getShaderParameter(webgl)(shader)(Lib_Window_WebGL_Constants.compileStatus)))(function (status) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(shader);
                      });
                  });
              }))(function (e) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.deleteShader(webgl)(shader)))(function () {
                      return Control_Monad_Except_Trans.except(Effect.applicativeEffect)(new Data_Either.Left(e));
                  });
              });
          });
      };
  };
  var createTexture = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to create texture")(Lib_Window_WebGL_Main.createTexture(webgl)))(function (texture) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(texture);
      });
  };
  var createProgram = function (shaders) {
      return function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to create program")(Lib_Window_WebGL_Main.createProgram(webgl)))(function (program) {
              return Control_Monad_Error_Class.catchError(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Data_Function.flip(Data_Foldable.traverse_(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Foldable.foldableArray))(shaders)((function () {
                  var $0 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect);
                  var $1 = Lib_Window_WebGL_Main.attachShader(webgl)(program);
                  return function ($2) {
                      return $0($1($2));
                  };
              })()))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.linkProgram(webgl)(program)))(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to find status")(Lib_Window_WebGL_Main.getProgramParameter(webgl)(program)(Lib_Window_WebGL_Constants.linkStatus)))(function (status) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(program);
                      });
                  });
              }))(function (e) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.deleteProgram(webgl)(program)))(function () {
                      return Control_Monad_Except_Trans.except(Effect.applicativeEffect)(new Data_Either.Left(e));
                  });
              });
          });
      };
  };
  var createFragmentShader = function (source) {
      return function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to initialize fragment shader")(Lib_Window_WebGL_Main.createShader(webgl)(Lib_Window_WebGL_Constants.fragmentShader)))(function (shader) {
              return Control_Monad_Error_Class.catchError(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.shaderSource(webgl)(shader)(source)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.compileShader(webgl)(shader)))(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to find status")(Lib_Window_WebGL_Main.getShaderParameter(webgl)(shader)(Lib_Window_WebGL_Constants.compileStatus)))(function (status) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(shader);
                      });
                  });
              }))(function (e) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.deleteShader(webgl)(shader)))(function () {
                      return Control_Monad_Except_Trans.except(Effect.applicativeEffect)(new Data_Either.Left(e));
                  });
              });
          });
      };
  };
  var createBuffer = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to create buffer")(Lib_Window_WebGL_Main.createBuffer(webgl)))(function (buffer) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(buffer);
      });
  };
  var clearColor = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (webgl) {
                      return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.clearColor(webgl)(a)(b)(c)(d));
                  };
              };
          };
      };
  };
  var clear = function (x) {
      return function (webgl) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.clear(webgl)(x));
      };
  };
  var resetViewport = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(getCanvas(webgl))(function (canvas) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_Canvas_Main.resize(canvas)))(function () {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(getCanvasDimension(webgl))(function (dimension) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(viewport(0)(0)(Data_Int.floor(dimension.width))(Data_Int.floor(dimension.height))(webgl))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(clearColor(0.0)(0.0)(0.0)(0.0)(webgl))(function () {
                          return clear(Lib_Window_WebGL_Constants.colorBufferBit | Lib_Window_WebGL_Constants.depthBufferBit)(webgl);
                      });
                  });
              });
          });
      });
  };
  var bufferData = function (x) {
      return function (xs) {
          return function (z) {
              return function (webgl) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.bufferData(webgl)(x)(xs)(z));
              };
          };
      };
  };
  var putArrayBuffer = function (xs) {
      return function (webgl) {
          return bufferData(Lib_Window_WebGL_Constants.arrayBuffer)(xs)(Lib_Window_WebGL_Constants.staticDraw)(webgl);
      };
  };
  var bindTexture = function (target) {
      return function (texture) {
          return function (webgl) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.bindTexture(webgl)(target)(texture));
          };
      };
  };
  var setTexture2d = function (texture) {
      return function (webgl) {
          return bindTexture(Lib_Window_WebGL_Constants.texture2d)(texture)(webgl);
      };
  };
  var bindBuffer = function (x) {
      return function (buffer) {
          return function (webgl) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.bindBuffer(webgl)(x)(buffer));
          };
      };
  };
  var setArrayBuffer = function (buffer) {
      return function (webgl) {
          return bindBuffer(Lib_Window_WebGL_Constants.arrayBuffer)(buffer)(webgl);
      };
  };
  exports["createProgram"] = createProgram;
  exports["createVertexShader"] = createVertexShader;
  exports["createFragmentShader"] = createFragmentShader;
  exports["createBuffer"] = createBuffer;
  exports["createTexture"] = createTexture;
  exports["useProgram"] = useProgram;
  exports["getUniformLocation"] = getUniformLocation;
  exports["getAttribLocation"] = getAttribLocation;
  exports["getCanvasDimension"] = getCanvasDimension;
  exports["setArrayBuffer"] = setArrayBuffer;
  exports["putArrayBuffer"] = putArrayBuffer;
  exports["setAttributeConfig"] = setAttributeConfig;
  exports["setTexture2d"] = setTexture2d;
  exports["setTexture2dConfigs"] = setTexture2dConfigs;
  exports["putTexture2d"] = putTexture2d;
  exports["renderArray"] = renderArray;
  exports["resetViewport"] = resetViewport;
  exports["uniform2f"] = uniform2f;
  exports["uniform1f"] = uniform1f;
  exports["uniform1fv"] = uniform1fv;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Shaders.Texture2d.Main"] = $PS["Shaders.Texture2d.Main"] || {};
  var exports = $PS["Shaders.Texture2d.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Lib_ExceptT_Main = $PS["Lib.ExceptT.Main"];
  var Lib_Float32Array_Main = $PS["Lib.Float32Array.Main"];
  var Lib_Graphics_Models_Rectangle_Main = $PS["Lib.Graphics.Models.Rectangle.Main"];
  var Lib_Image_Main = $PS["Lib.Image.Main"];
  var Lib_Kernel_Main = $PS["Lib.Kernel.Main"];
  var Lib_WebGL_Main = $PS["Lib.WebGL.Main"];
  var Lib_Window_Canvas_Main = $PS["Lib.Window.Canvas.Main"];
  var Lib_Window_Image_Main = $PS["Lib.Window.Image.Main"];
  var Lib_Window_WebGL_Constants = $PS["Lib.Window.WebGL.Constants"];                
  var vertexShaderSource = "\x0aattribute vec2 a_position;\x0aattribute vec2 a_textureCoordinate;\x0a\x0auniform vec2 u_resolution;\x0a\x0avarying vec2 v_textureCoordinate;\x0a\x0avoid main() {\x0a  // convert the rectangle from pixels to 0.0 to 1.0\x0a  vec2 zeroToOne = a_position / u_resolution;\x0a\x0a  // convert from 0->1 to 0->2\x0a  vec2 zeroToTwo = zeroToOne * 2.0;\x0a\x0a  // convert from 0->2 to -1->+1 (clipspace)\x0a  vec2 clipSpace = zeroToTwo - 1.0;\x0a\x0a  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\x0a\x0a  // pass the texCoord to the fragment shader\x0a  // The GPU will interpolate this value between points.\x0a  v_textureCoordinate = a_textureCoordinate;\x0a}\x0a";
  var fragmentShaderSource = "\x0aprecision mediump float;\x0a\x0a// our texture\x0auniform sampler2D u_image;\x0auniform vec2 u_textureSize;\x0auniform float u_kernel[9];\x0auniform float u_kernelWeight;\x0a\x0a// the texCoords passed in from the vertex shader.\x0avarying vec2 v_textureCoordinate;\x0a\x0avoid main() {\x0a  vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;\x0a  vec4 colorSum =\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2(-1, -1)) * u_kernel[0] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2( 0, -1)) * u_kernel[1] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2( 1, -1)) * u_kernel[2] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2(-1,  0)) * u_kernel[3] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2( 0,  0)) * u_kernel[4] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2( 1,  0)) * u_kernel[5] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2(-1,  1)) * u_kernel[6] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2( 0,  1)) * u_kernel[7] +\x0a      texture2D(u_image, v_textureCoordinate + onePixel * vec2( 1,  1)) * u_kernel[8] ;\x0a  gl_FragColor = vec4((colorSum / u_kernelWeight).bgr, 1);\x0a}\x0a";
  var main = function (env) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to create webgl context")(Lib_Window_Canvas_Main.getWebGLContext(env.canvas)))(function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createVertexShader(vertexShaderSource)(webgl))(function (vertex) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createFragmentShader(fragmentShaderSource)(webgl))(function (fragment) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                      vertex: vertex,
                      fragment: fragment
                  });
              });
          }))(function (shaders) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createProgram([ shaders.vertex, shaders.fragment ])(webgl))(function (program) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getUniformLocation("u_textureSize")(program)(webgl))(function (textureSize) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getUniformLocation("u_resolution")(program)(webgl))(function (resolution) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getUniformLocation("u_kernel")(program)(webgl))(function (kernel) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getUniformLocation("u_kernelWeight")(program)(webgl))(function (kernelWeight) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                                      textureSize: textureSize,
                                      resolution: resolution,
                                      kernel: kernel,
                                      kernelWeight: kernelWeight
                                  });
                              });
                          });
                      });
                  }))(function (uniforms) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getAttribLocation("a_position")(program)(webgl))(function (location) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                              index: location,
                              size: 2,
                              type: Lib_Window_WebGL_Constants["float"],
                              normalize: false,
                              stride: 0,
                              offset: 0
                          });
                      }))(function (position) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getAttribLocation("a_textureCoordinate")(program)(webgl))(function (location) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                                  index: location,
                                  size: 2,
                                  type: Lib_Window_WebGL_Constants["float"],
                                  normalize: false,
                                  stride: 0,
                                  offset: 0
                              });
                          }))(function (texture) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                                  position: position,
                                  texture: texture
                              });
                          });
                      }))(function (attributes) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createBuffer(webgl))(function (position) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createBuffer(webgl))(function (texture) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                                      position: position,
                                      texture: texture
                                  });
                              });
                          }))(function (buffers) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createTexture(webgl))(function (x) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                                      x: x
                                  });
                              }))(function (textures) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Image_Main.getDimension(env.image)))(function (image) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getCanvasDimension(webgl))(function (canvas) {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                                              image: image,
                                              canvas: canvas
                                          });
                                      });
                                  }))(function (dimensions) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.resetViewport(webgl))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.useProgram(program)(webgl))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.uniform2f(dimensions.image.width)(dimensions.image.height)(uniforms.textureSize)(webgl))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.uniform2f(dimensions.canvas.width)(dimensions.canvas.height)(uniforms.resolution)(webgl))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.uniform1fv(env.kernel)(uniforms.kernel)(webgl))(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.uniform1f(Lib_Kernel_Main.toWeight(env.kernel))(uniforms.kernelWeight)(webgl))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setArrayBuffer(buffers.position)(webgl))(function () {
                                                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)((function () {
                                                                      var model = {
                                                                          x: 0.0,
                                                                          y: 0.0,
                                                                          width: 500.0,
                                                                          height: 500.0
                                                                      };
                                                                      return Data_Functor.map(Effect.functorEffect)(Lib_Float32Array_Main.toArrayBuffer)(Lib_Float32Array_Main.fromArray(Lib_Graphics_Models_Rectangle_Main.toArray(model)));
                                                                  })()))(function (position) {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.putArrayBuffer(position)(webgl))(function () {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setAttributeConfig(attributes.position)(webgl))(function () {
                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setArrayBuffer(buffers.texture)(webgl))(function () {
                                                                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)((function () {
                                                                                      var model = [ 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0 ];
                                                                                      return Data_Functor.map(Effect.functorEffect)(Lib_Float32Array_Main.toArrayBuffer)(Lib_Float32Array_Main.fromArray(model));
                                                                                  })()))(function (texture) {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.putArrayBuffer(texture)(webgl))(function () {
                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setAttributeConfig(attributes.texture)(webgl))(function () {
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setTexture2d(textures.x)(webgl))(function () {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Data_Function.flip(Lib_WebGL_Main.setTexture2dConfigs)(webgl)([ {
                                                                                                      pname: Lib_Window_WebGL_Constants.textureWrapS,
                                                                                                      param: Lib_Window_WebGL_Constants.clampToEdge
                                                                                                  }, {
                                                                                                      pname: Lib_Window_WebGL_Constants.textureWrapT,
                                                                                                      param: Lib_Window_WebGL_Constants.clampToEdge
                                                                                                  }, {
                                                                                                      pname: Lib_Window_WebGL_Constants.textureMinFilter,
                                                                                                      param: Lib_Window_WebGL_Constants.nearest
                                                                                                  }, {
                                                                                                      pname: Lib_Window_WebGL_Constants.textureMagFilter,
                                                                                                      param: Lib_Window_WebGL_Constants.nearest
                                                                                                  } ]))(function () {
                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Data_Function.flip(Lib_WebGL_Main.putTexture2d)(webgl)({
                                                                                                          level: 0,
                                                                                                          internalFormat: Lib_Window_WebGL_Constants.rgba,
                                                                                                          format: Lib_Window_WebGL_Constants.rgba,
                                                                                                          type: Lib_Window_WebGL_Constants.unsignedByte,
                                                                                                          source: Lib_Window_Image_Main.toTexImageSource(env.image)
                                                                                                      }))(function () {
                                                                                                          return Data_Function.flip(Lib_WebGL_Main.renderArray)(webgl)({
                                                                                                              mode: Lib_Window_WebGL_Constants.triangles,
                                                                                                              first: 0,
                                                                                                              count: 6
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  exports["main"] = main;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Pages.Shaders.Texture2d.Main"] = $PS["Pages.Shaders.Texture2d.Main"] || {};
  var exports = $PS["Pages.Shaders.Texture2d.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Lib_ExceptT_Main = $PS["Lib.ExceptT.Main"];
  var Lib_Kernel_Main = $PS["Lib.Kernel.Main"];
  var Lib_Window_Image_Main = $PS["Lib.Window.Image.Main"];
  var Shaders_Texture2d_Main = $PS["Shaders.Texture2d.Main"];                
  var main = function __do() {
      Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.ExceptT(Lib_Window_Image_Main.fromUrl("/assets/images/kskkido_1.jpg")))(function (image) {
          return Control_Monad_Except_Trans.mapExceptT(Effect_Class.liftEffect(Effect_Aff.monadEffectAff))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to locate canvas")(Graphics_Canvas.getCanvasElementById("canvas")))(function (canvas) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Effect_Console.log("Found canvas")))(function () {
                  return Shaders_Texture2d_Main.main({
                      canvas: canvas,
                      image: image,
                      kernel: Lib_Kernel_Main.sharpness1
                  });
              });
          }));
      })))(function (result) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Either.either(function ($0) {
              return Effect_Exception.throwException(Effect_Exception.error($0));
          })(Control_Applicative.pure(Effect.applicativeEffect))(result));
      }))();
      return Effect_Console.log("\ud83c\udf5d")();
  };
  exports["main"] = main;
})(PS);
PS["Pages.Shaders.Texture2d.Main"].main();