// Generated by purs bundle 0.14.4
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var guard = function (dictAlternative) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty(dictAlternative.Plus1());
          };
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [ v.constructor.name ]);
      };
  };
  exports["guard"] = guard;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Cont.Trans"] = $PS["Control.Monad.Cont.Trans"] || {};
  var exports = $PS["Control.Monad.Cont.Trans"];         
  var ContT = function (x) {
      return x;
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var functorContT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (k) {
                      return v(function (a) {
                          return k(f(a));
                      });
                  };
              };
          }
      };
  };
  var applyContT = function (dictApply) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (k) {
                      return v(function (g) {
                          return v1(function (a) {
                              return k(g(a));
                          });
                      });
                  };
              };
          },
          Functor0: function () {
              return functorContT(dictApply.Functor0());
          }
      };
  };
  var applicativeContT = function (dictApplicative) {
      return {
          pure: function (a) {
              return function (k) {
                  return k(a);
              };
          },
          Apply0: function () {
              return applyContT(dictApplicative.Apply0());
          }
      };
  };
  exports["ContT"] = ContT;
  exports["runContT"] = runContT;
  exports["functorContT"] = functorContT;
  exports["applicativeContT"] = applicativeContT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["catchError"] = catchError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var monadTransExceptT = {
      lift: function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
              });
          };
      }
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var except = function (dictApplicative) {
      var $89 = Control_Applicative.pure(dictApplicative);
      return function ($90) {
          return ExceptT($89($90));
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var monadErrorExceptT = function (dictMonad) {
      return {
          catchError: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                      var v1 = k(a);
                      return v1;
                  })((function () {
                      var $105 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($106) {
                          return $105(Data_Either.Right.create($106));
                      };
                  })()));
              };
          },
          MonadThrow0: function () {
              return monadThrowExceptT(dictMonad);
          }
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"]; 
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = {
      map: $foreign.map_
  };
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };   

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  var altMaybe = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var plusMaybe = {
      empty: Nothing.value,
      Alt0: function () {
          return altMaybe;
      }
  };
  var alternativeMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Plus1: function () {
          return plusMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var tail = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var splitAt = function (i) {
      return function (xs) {
          if (i <= 0) {
              return {
                  before: [  ],
                  after: xs
              };
          };
          return {
              before: $foreign.slice(0)(i)(xs),
              after: $foreign.slice(i)($foreign.length(xs))(xs)
          };
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unzip = function (xs) {
      return (function __do() {
          var fsts = Data_Array_ST["new"]();
          var snds = Data_Array_ST["new"]();
          var iter = Data_Array_ST_Iterator.iterator(function (v) {
              return index(xs)(v);
          })();
          Data_Array_ST_Iterator.iterate(iter)(function (v) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
              };
          })();
          var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
          var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
          return new Data_Tuple.Tuple(fsts$prime, snds$prime);
      })();
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  exports["cons"] = cons;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["splitAt"] = splitAt;
  exports["mapMaybe"] = mapMaybe;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["concat"] = $foreign.concat;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof LT && v1 instanceof LT) {
                  return true;
              };
              if (v instanceof GT && v1 instanceof GT) {
                  return true;
              };
              if (v instanceof EQ && v1 instanceof EQ) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $164 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($164) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
  exports["sum"] = sum;
  exports["maximumBy"] = maximumBy;
  exports["null"] = $$null;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };                         

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["tan"] = $foreign.tan;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];              
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                    
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var ringNumber = {
      sub: $foreign.numSub,
      Semiring0: function () {
          return Data_Semiring.semiringNumber;
      }
  };
  exports["sub"] = sub;
  exports["ringNumber"] = ringNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple.Nested"] = $PS["Data.Tuple.Nested"] || {};
  var exports = $PS["Data.Tuple.Nested"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  var tuple2 = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
      };
  };
  var get4 = function (v) {
      return v.value1.value1.value1.value0;
  };
  var get3 = function (v) {
      return v.value1.value1.value0;
  };
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  exports["tuple2"] = tuple2;
  exports["tuple3"] = tuple3;
  exports["tuple4"] = tuple4;
  exports["get1"] = get1;
  exports["get2"] = get2;
  exports["get3"] = get3;
  exports["get4"] = get4;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Array.Main"] = $PS["Lib.Array.Main"] || {};
  var exports = $PS["Lib.Array.Main"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var transpose = function (xxs) {
      var v = Data_Array.uncons(xxs);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Functor.map(Data_Functor.functorArray)(function (i) {
              return Data_Array.mapMaybe(Data_Function.flip(Data_Array.index)(i))(xxs);
          })(Data_Array.range(0)(Data_Array.length(v.value0.head) - 1 | 0));
      };
      throw new Error("Failed pattern match at Lib.Array.Main (line 10, column 17 - line 16, column 6): " + [ v.constructor.name ]);
  };
  exports["transpose"] = transpose;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Window.Canvas.Main

  exports.getWebGLContextImpl = function (canvas) {
    return function () {
      return canvas.getContext('webgl');
    };
  };

  exports.getClientWidthImpl = function (canvas) {
    return function () {
      return canvas.clientWidth;
    };
  };

  exports.getClientHeightImpl = function (canvas) {
    return function () {
      return canvas.clientHeight;
    };
  };

  exports.resizeImpl = function (canvas) {
    return function () {
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
    };
  };
})(PS["Lib.Window.Canvas.Main"] = PS["Lib.Window.Canvas.Main"] || {});
(function(exports) {
  'use strict';

  // module Graphics.WebGL.Raw.Util

  exports.fromImpl = function (Nothing, Just, x) {
    if (x === undefined || x === null) {
      return Nothing;
    } else {
      return Just(x);
    }
  };
})(PS["Lib.Maybe.Main"] = PS["Lib.Maybe.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Maybe.Main"] = $PS["Lib.Maybe.Main"] || {};
  var exports = $PS["Lib.Maybe.Main"];
  var $foreign = $PS["Lib.Maybe.Main"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var from = function (x) {
      return $foreign.fromImpl(Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["from"] = from;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.Canvas.Main"] = $PS["Lib.Window.Canvas.Main"] || {};
  var exports = $PS["Lib.Window.Canvas.Main"];
  var $foreign = $PS["Lib.Window.Canvas.Main"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Lib_Maybe_Main = $PS["Lib.Maybe.Main"];                
  var resize = $foreign.resizeImpl;
  var getWebGLContext = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)(Lib_Maybe_Main.from);
      return function ($1) {
          return $0($foreign.getWebGLContextImpl($1));
      };
  })();
  var getClientWidth = $foreign.getClientWidthImpl;
  var getClientHeight = $foreign.getClientHeightImpl;
  exports["getWebGLContext"] = getWebGLContext;
  exports["getClientWidth"] = getClientWidth;
  exports["getClientHeight"] = getClientHeight;
  exports["resize"] = resize;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Canvas.Main"] = $PS["Lib.Canvas.Main"] || {};
  var exports = $PS["Lib.Canvas.Main"];
  var Lib_Window_Canvas_Main = $PS["Lib.Window.Canvas.Main"];                
  var getDimension = function (canvas) {
      return function __do() {
          var width = Lib_Window_Canvas_Main.getClientWidth(canvas)();
          var height = Lib_Window_Canvas_Main.getClientHeight(canvas)();
          return {
              width: width,
              height: height
          };
      };
  };
  exports["getDimension"] = getDimension;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Math.Main"] = $PS["Lib.Math.Main"] || {};
  var exports = $PS["Lib.Math.Main"];
  var $$Math = $PS["Math"];                
  var radian = function (n) {
      return n * ($$Math.pi / 180.0);
  };
  var clamp = function ($copy_x) {
      return function ($copy_min) {
          return function ($copy_max) {
              var $tco_var_x = $copy_x;
              var $tco_var_min = $copy_min;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(x, min, max) {
                  var $0 = max >= min;
                  if ($0) {
                      $tco_done = true;
                      return $$Math.min($$Math.max(x)(min))(max);
                  };
                  $tco_var_x = x;
                  $tco_var_min = max;
                  $copy_max = min;
                  return;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_x, $tco_var_min, $copy_max);
              };
              return $tco_result;
          };
      };
  };
  exports["clamp"] = clamp;
  exports["radian"] = radian;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Coordinate2d.Main"] = $PS["Lib.Coordinate2d.Main"] || {};
  var exports = $PS["Lib.Coordinate2d.Main"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var Lib_Math_Main = $PS["Lib.Math.Main"];
  var $$Math = $PS["Math"];                
  var fromRadian = function (n) {
      return Data_Tuple_Nested.tuple2($$Math.cos(n))($$Math.sin(n));
  };
  var fromDegree = function ($0) {
      return fromRadian(Lib_Math_Main.radian($0));
  };
  exports["fromDegree"] = fromDegree;
})(PS);
(function(exports) {
  "use strict";

  exports.add = function(list) {
    return function(token) {
      return function() {
        return list.add(token);
      };
    };
  };
})(PS["Web.DOM.DOMTokenList"] = PS["Web.DOM.DOMTokenList"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.DOMTokenList"] = $PS["Web.DOM.DOMTokenList"] || {};
  var exports = $PS["Web.DOM.DOMTokenList"];
  var $foreign = $PS["Web.DOM.DOMTokenList"];
  exports["add"] = $foreign.add;
})(PS);
(function(exports) {
  "use strict";

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };
})(PS["Web.DOM.Document"] = PS["Web.DOM.Document"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.Document"] = $PS["Web.DOM.Document"] || {};
  var exports = $PS["Web.DOM.Document"];
  var $foreign = $PS["Web.DOM.Document"];
  exports["createElement"] = $foreign.createElement;
})(PS);
(function(exports) {
  "use strict";

  exports.classList = function (element) {
    return function () {
      return element.classList;
    };
  };

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
        };
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
  exports["toEventTarget"] = toEventTarget;
  exports["classList"] = $foreign.classList;
  exports["setAttribute"] = $foreign.setAttribute;
})(PS);
(function(exports) {
  "use strict";                                   

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        parent.appendChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  exports["setTextContent"] = $foreign.setTextContent;
  exports["appendChild"] = $foreign.appendChild;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var body = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_body"]($9));
      };
  })();
  exports["toDocument"] = toDocument;
  exports["body"] = body;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Element.Main"] = $PS["Lib.Element.Main"] || {};
  var exports = $PS["Lib.Element.Main"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Web_DOM_DOMTokenList = $PS["Web.DOM.DOMTokenList"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var setTextContent = function (text) {
      return function (element) {
          var parent = Web_DOM_Element.toNode(element);
          return Web_DOM_Node.setTextContent(text)(parent);
      };
  };
  var fromTag = function (tag) {
      return function (window) {
          return function __do() {
              var document = Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Web_HTML_Window.document(window))();
              return Web_DOM_Document.createElement(tag)(document)();
          };
      };
  };
  var append = function (nodes) {
      return function (element) {
          var parent = Web_DOM_Element.toNode(element);
          return Data_Function.flip(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray))(nodes)(function (node) {
              return Web_DOM_Node.appendChild(node)(parent);
          });
      };
  };
  var addClass = function (name) {
      return function (element) {
          return function __do() {
              var classList = Web_DOM_Element.classList(element)();
              return Web_DOM_DOMTokenList.add(classList)(name)();
          };
      };
  };
  exports["fromTag"] = fromTag;
  exports["addClass"] = addClass;
  exports["append"] = append;
  exports["setTextContent"] = setTextContent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.ExceptT.Main"] = $PS["Lib.ExceptT.Main"] || {};
  var exports = $PS["Lib.ExceptT.Main"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromMaybeTrans = function (dictMonad) {
      return function (l) {
          return function (mmx) {
              return Control_Monad_Except_Trans.ExceptT((function () {
                  var el = new Data_Either.Left(l);
                  return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Maybe.maybe(el)(Data_Either.Right.create))(mmx);
              })());
          };
      };
  };
  exports["fromMaybeTrans"] = fromMaybeTrans;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Float32Array.Main

  exports.fromArrayImpl = function (xs) {
    return function () {
      return new Float32Array(xs);
    };
  };

  exports.toArrayBufferImpl = function (xs) {
    return xs;
  };
})(PS["Lib.Float32Array.Main"] = PS["Lib.Float32Array.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Float32Array.Main"] = $PS["Lib.Float32Array.Main"] || {};
  var exports = $PS["Lib.Float32Array.Main"];
  var $foreign = $PS["Lib.Float32Array.Main"];
  var toArrayBuffer = $foreign.toArrayBufferImpl;
  var fromArray = $foreign.fromArrayImpl;
  exports["fromArray"] = fromArray;
  exports["toArrayBuffer"] = toArrayBuffer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Graphics.Models.AlphabetF3d.Main"] = $PS["Lib.Graphics.Models.AlphabetF3d.Main"] || {};
  var exports = $PS["Lib.Graphics.Models.AlphabetF3d.Main"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];                
  var array = Data_Functor.map(Data_Functor.functorArray)(Data_Int.toNumber)([ 0, 0, 0, 0, 150, 0, 30, 0, 0, 0, 150, 0, 30, 150, 0, 30, 0, 0, 30, 0, 0, 30, 30, 0, 100, 0, 0, 30, 30, 0, 100, 30, 0, 100, 0, 0, 30, 60, 0, 30, 90, 0, 67, 60, 0, 30, 90, 0, 67, 90, 0, 67, 60, 0, 0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30, 30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30, 30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30, 0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30, 100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30, 30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0, 30, 30, 0, 30, 60, 30, 30, 30, 30, 30, 30, 0, 30, 60, 0, 30, 60, 30, 30, 60, 0, 67, 60, 30, 30, 60, 30, 30, 60, 0, 67, 60, 0, 67, 60, 30, 67, 60, 0, 67, 90, 30, 67, 60, 30, 67, 60, 0, 67, 90, 0, 67, 90, 30, 30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0, 30, 90, 0, 30, 150, 30, 30, 90, 30, 30, 90, 0, 30, 150, 0, 30, 150, 30, 0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0, 0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0 ]);
  exports["array"] = array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Graphics.Models.AlphabetF3dColor.Main"] = $PS["Lib.Graphics.Models.AlphabetF3dColor.Main"] || {};
  var exports = $PS["Lib.Graphics.Models.AlphabetF3dColor.Main"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];                
  var array = Data_Functor.map(Data_Functor.functorArray)(Data_Int.toNumber)([ 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 70, 200, 210, 70, 200, 210, 70, 200, 210, 70, 200, 210, 70, 200, 210, 70, 200, 210, 200, 200, 70, 200, 200, 70, 200, 200, 70, 200, 200, 70, 200, 200, 70, 200, 200, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 160, 70, 210, 160, 70, 210, 160, 70, 210, 160, 70, 210, 160, 70, 210, 160, 70, 70, 180, 210, 70, 180, 210, 70, 180, 210, 70, 180, 210, 70, 180, 210, 70, 180, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 76, 210, 100, 76, 210, 100, 76, 210, 100, 76, 210, 100, 76, 210, 100, 76, 210, 100, 140, 210, 80, 140, 210, 80, 140, 210, 80, 140, 210, 80, 140, 210, 80, 140, 210, 80, 90, 130, 110, 90, 130, 110, 90, 130, 110, 90, 130, 110, 90, 130, 110, 90, 130, 110, 160, 160, 220, 160, 160, 220, 160, 160, 220, 160, 160, 220, 160, 160, 220, 160, 160, 220 ]);
  exports["array"] = array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Map.Main"] = $PS["Lib.Map.Main"] || {};
  var exports = $PS["Lib.Map.Main"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];                
  var insert = function (dictOrd) {
      return function (tx) {
          return function (mx) {
              return Data_Map_Internal.insert(dictOrd)(Data_Tuple_Nested.get1(tx))(Data_Tuple_Nested.get2(tx))(mx);
          };
      };
  };
  exports["insert"] = insert;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Matrix.Main"] = $PS["Lib.Matrix.Main"] || {};
  var exports = $PS["Lib.Matrix.Main"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var Lib_Array_Main = $PS["Lib.Array.Main"];
  var $$Math = $PS["Math"];                
  var toBubble = function (xss) {
      return function (yss) {
          var idmax = Data_Maybe.maybe(0)(Data_Tuple.fst)(Data_Foldable.maximumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Data_Ord.ordNumber)(Data_Tuple.snd))(Data_Array.zip(Data_Array.range(0)(Data_Array.length(xss)))(Data_Functor.map(Data_Functor.functorArray)((function () {
              var $2 = Data_Maybe.maybe(0.0)(Control_Category.identity(Control_Category.categoryFn));
              var $3 = Data_Functor.map(Data_Maybe.functorMaybe)($$Math.abs);
              return function ($4) {
                  return $2($3(Data_Array.head($4)));
              };
          })())(xss))));
          var go = function (ys) {
              var tx = Data_Array.splitAt(idmax)(ys);
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(tx.after)(tx.before);
          };
          return Data_Tuple_Nested.tuple2(go(xss))(go(yss));
      };
  };
  var toTriangle = function (xss) {
      return function (yss) {
          var iter = function (tss) {
              return function (zss) {
                  return Data_Maybe.maybe(tss)(Control_Category.identity(Control_Category.categoryFn))(Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Data_Foldable["null"](Data_Foldable.foldableArray)(Data_Tuple_Nested.get1(zss))))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Data_Foldable["null"](Data_Foldable.foldableArray)(Data_Tuple_Nested.get2(zss))))(function () {
                          var txs = toBubble(Data_Tuple_Nested.get1(zss))(Data_Tuple_Nested.get2(zss));
                          var uss = Data_Tuple_Nested.get1(txs);
                          var us = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(uss));
                          var u = Data_Maybe.maybe(0.0)(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(us));
                          var ut = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(uss));
                          var tus = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(us));
                          var pss = Data_Tuple_Nested.get2(tss);
                          var oss = Data_Tuple_Nested.get1(tss);
                          var css = Data_Tuple_Nested.get2(txs);
                          var ct = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(css));
                          var cs = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(css));
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(iter(Data_Tuple_Nested.tuple2(Data_Array.cons(us)(oss))(Data_Array.cons(cs)(pss)))((function (tx) {
                              return Data_Tuple_Nested.tuple2(Data_Tuple.fst(tx))(Data_Tuple.snd(tx));
                          })(Data_Array.unzip(Data_Functor.map(Data_Functor.functorArray)(function (uxs) {
                              var vs = Data_Tuple.fst(uxs);
                              var vt = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(vs));
                              var v = Data_Maybe.maybe(0.0)(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(vs));
                              var fn = Data_Array.zipWith(function (x) {
                                  return function (y) {
                                      return v * x - u * y;
                                  };
                              });
                              var es = Data_Tuple.snd(uxs);
                              return new Data_Tuple.Tuple(fn(tus)(vt), fn(cs)(es));
                          })(Data_Array.zip(ut)(ct))))));
                      });
                  }));
              };
          };
          return iter(Data_Tuple_Nested.tuple2([  ])([  ]))(Data_Tuple_Nested.tuple2(xss)(yss));
      };
  };
  var multiply = function (xss) {
      return function (yss) {
          return (function (yss1) {
              return Data_Functor.map(Data_Functor.functorArray)(function (xs) {
                  return Data_Functor.map(Data_Functor.functorArray)(function (ys) {
                      return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringNumber)(Data_Array.zipWith(Data_Semiring.mul(Data_Semiring.semiringNumber))(xs)(ys));
                  })(yss1);
              })(xss);
          })(Lib_Array_Main.transpose(yss));
      };
  };
  var fromTriangle = function (txs) {
      var iter = function (xss) {
          return function (yss) {
              return function (zss) {
                  return Data_Maybe.maybe(zss)(Control_Category.identity(Control_Category.categoryFn))((function () {
                      var yt = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(yss));
                      var ys = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(yss));
                      var xt = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(xss));
                      var xs = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(xss));
                      var xu = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(xs));
                      var zs = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(multiply([ xu ])(zss)));
                      var x = Data_Maybe.maybe(0.0)(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(xs));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Data_Foldable["null"](Data_Foldable.foldableArray)(xss)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Data_Foldable["null"](Data_Foldable.foldableArray)(yss)))(function () {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(iter(xt)(yt)(Data_Array.cons(Data_Functor.map(Data_Functor.functorArray)(function (z) {
                                  return z / x;
                              })(Data_Array.zipWith(Data_Ring.sub(Data_Ring.ringNumber))(ys)(zs)))(zss)));
                          });
                      });
                  })());
              };
          };
      };
      var bss = Data_Tuple_Nested.get2(txs);
      var bt = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(bss));
      var bs = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(bss));
      var ass = Data_Tuple_Nested.get1(txs);
      var at = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.tail(ass));
      var as = Data_Maybe.maybe([  ])(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(ass));
      var a = Data_Maybe.maybe(0.0)(Control_Category.identity(Control_Category.categoryFn))(Data_Array.head(as));
      return iter(at)(bt)([ Data_Functor.map(Data_Functor.functorArray)(function (b) {
          return b / a;
      })(bs) ]);
  };
  var from = function (fn) {
      return function (n) {
          var range = Data_Array.range(0)(n - 1 | 0);
          return Data_Functor.map(Data_Functor.functorArray)(function (x) {
              return Data_Functor.map(Data_Functor.functorArray)(fn(x))(range);
          })(range);
      };
  };
  var fromN = function (n) {
      var step = function (x) {
          return function (y) {
              if (x === y) {
                  return 1.0;
              };
              if (Data_Boolean.otherwise) {
                  return 0.0;
              };
              throw new Error("Failed pattern match at Lib.Matrix.Main (line 23, column 9 - line 24, column 35): " + [ x.constructor.name, y.constructor.name ]);
          };
      };
      return from(step)(n);
  };
  var invert = function (xss) {
      return fromTriangle(toTriangle(xss)(fromN(Data_Array.length(xss))));
  };
  exports["multiply"] = multiply;
  exports["invert"] = invert;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Vector3.Main"] = $PS["Lib.Vector3.Main"] || {};
  var exports = $PS["Lib.Vector3.Main"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var $$Math = $PS["Math"];                
  var unit = Data_Tuple_Nested.tuple3(0.0)(0.0)(0.0);
  var subtract = function (vx) {
      return function (vy) {
          return Data_Tuple_Nested.tuple3(Data_Tuple_Nested.get1(vx) - Data_Tuple_Nested.get1(vy))(Data_Tuple_Nested.get2(vx) - Data_Tuple_Nested.get2(vy))(Data_Tuple_Nested.get3(vx) - Data_Tuple_Nested.get3(vy));
      };
  };
  var length = function (vx) {
      var z = Data_Tuple_Nested.get3(vx);
      var y = Data_Tuple_Nested.get2(vx);
      var x = Data_Tuple_Nested.get1(vx);
      return $$Math.sqrt(x * x + y * y + z * z);
  };
  var normalize = function (vx) {
      return Data_Maybe.maybe(unit)(Control_Category.identity(Control_Category.categoryFn))((function () {
          var lx = length(vx);
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(lx > 1.0e-6))(function () {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Tuple_Nested.tuple3(Data_Tuple_Nested.get1(vx) / lx)(Data_Tuple_Nested.get2(vx) / lx)(Data_Tuple_Nested.get3(vx) / lx));
          });
      })());
  };
  var cross = function (vx) {
      return function (vy) {
          var z2 = Data_Tuple_Nested.get3(vy);
          var z1 = Data_Tuple_Nested.get3(vx);
          var y2 = Data_Tuple_Nested.get2(vy);
          var y1 = Data_Tuple_Nested.get2(vx);
          var x2 = Data_Tuple_Nested.get1(vy);
          var x1 = Data_Tuple_Nested.get1(vx);
          return Data_Tuple_Nested.tuple3(y1 * z2 - z1 * y2)(z1 * x2 - x1 * z2)(x1 * y2 - y1 * x2);
      };
  };
  exports["unit"] = unit;
  exports["cross"] = cross;
  exports["subtract"] = subtract;
  exports["normalize"] = normalize;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Matrix4.Main"] = $PS["Lib.Matrix4.Main"] || {};
  var exports = $PS["Lib.Matrix4.Main"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var Lib_Math_Main = $PS["Lib.Math.Main"];
  var Lib_Vector3_Main = $PS["Lib.Vector3.Main"];
  var $$Math = $PS["Math"];                
  var unit = [ [ 1.0, 0.0, 0.0, 0.0 ], [ 0.0, 1.0, 0.0, 0.0 ], [ 0.0, 0.0, 1.0, 0.0 ], [ 0.0, 0.0, 0.0, 1.0 ] ];
  var translate = function (tx) {
      var z = Data_Tuple_Nested.get3(tx);
      var y = Data_Tuple_Nested.get2(tx);
      var x = Data_Tuple_Nested.get1(tx);
      return [ [ 1.0, 0.0, 0.0, x ], [ 0.0, 1.0, 0.0, y ], [ 0.0, 0.0, 1.0, z ], [ 0.0, 0.0, 0.0, 1.0 ] ];
  };
  var toCameraPosition = function (mx) {
      return Data_Maybe.maybe(Lib_Vector3_Main.unit)(Control_Category.identity(Control_Category.categoryFn))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.last)(mx))(function (r) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple_Nested.tuple3)(Data_Array.index(r)(0)))(Data_Array.index(r)(1)))(Data_Array.index(r)(2));
      }));
  };
  var scale = function (tx) {
      var z = Data_Tuple_Nested.get3(tx);
      var y = Data_Tuple_Nested.get2(tx);
      var x = Data_Tuple_Nested.get1(tx);
      return [ [ x, 0.0, 0.0, 0.0 ], [ 0.0, y, 0.0, 0.0 ], [ 0.0, 0.0, z, 0.0 ], [ 0.0, 0.0, 0.0, 1.0 ] ];
  };
  var rotateZ = function (tx) {
      var y = Data_Tuple_Nested.get2(tx);
      var x = Data_Tuple_Nested.get1(tx);
      return [ [ x, -y, 0.0, 0.0 ], [ y, x, 0.0, 0.0 ], [ 0.0, 0.0, 1.0, 0.0 ], [ 0.0, 0.0, 0.0, 1.0 ] ];
  };
  var rotateY = function (tx) {
      var y = Data_Tuple_Nested.get2(tx);
      var x = Data_Tuple_Nested.get1(tx);
      return [ [ x, 0.0, y, 0.0 ], [ 0.0, 1.0, 0.0, 0.0 ], [ -y, 0.0, x, 0.0 ], [ 0.0, 0.0, 0.0, 1.0 ] ];
  };
  var rotateX = function (tx) {
      var y = Data_Tuple_Nested.get2(tx);
      var x = Data_Tuple_Nested.get1(tx);
      return [ [ 1.0, 0.0, 0.0, 0.0 ], [ 0.0, x, -y, 0.0 ], [ 0.0, y, x, 0.0 ], [ 0.0, 0.0, 0.0, 1.0 ] ];
  };
  var perspective = function (tx) {
      var y = Data_Tuple_Nested.get4(tx);
      var x = Data_Tuple_Nested.get3(tx);
      var r = 1.0 / (x - y);
      var fov = Lib_Math_Main.radian(Data_Tuple_Nested.get1(tx));
      var f = $$Math.tan($$Math.pi * 0.5 - 0.5 * fov);
      var a = Data_Tuple_Nested.get2(tx);
      return [ [ f / a, 0.0, 0.0, 0.0 ], [ 0.0, f, 0.0, 0.0 ], [ 0.0, 0.0, (x + y) * r, x * y * r * 2.0 ], [ 0.0, 0.0, -1.0, 0.0 ] ];
  };
  var lookAt = function (position) {
      return function (target) {
          return function (up) {
              var zAxis = Lib_Vector3_Main.normalize(Lib_Vector3_Main.subtract(position)(target));
              var xAxis = Lib_Vector3_Main.normalize(Lib_Vector3_Main.cross(up)(zAxis));
              var yAxis = Lib_Vector3_Main.normalize(Lib_Vector3_Main.cross(zAxis)(xAxis));
              return [ [ Data_Tuple_Nested.get1(xAxis), Data_Tuple_Nested.get1(yAxis), Data_Tuple_Nested.get1(zAxis), Data_Tuple_Nested.get1(position) ], [ Data_Tuple_Nested.get2(xAxis), Data_Tuple_Nested.get2(yAxis), Data_Tuple_Nested.get2(zAxis), Data_Tuple_Nested.get2(position) ], [ Data_Tuple_Nested.get3(xAxis), Data_Tuple_Nested.get3(yAxis), Data_Tuple_Nested.get3(zAxis), Data_Tuple_Nested.get3(position) ], [ 0.0, 0.0, 0.0, 1.0 ] ];
          };
      };
  };
  exports["unit"] = unit;
  exports["rotateX"] = rotateX;
  exports["rotateY"] = rotateY;
  exports["rotateZ"] = rotateZ;
  exports["translate"] = translate;
  exports["scale"] = scale;
  exports["perspective"] = perspective;
  exports["lookAt"] = lookAt;
  exports["toCameraPosition"] = toCameraPosition;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Window.Main

  exports.requestAnimationFrameImpl = function (fn) {
    return function (w) {
      return function () {
        return w.requestAnimationFrame((t) => fn(t)());
      };
    };
  };
})(PS["Lib.Window.Main"] = PS["Lib.Window.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.Main"] = $PS["Lib.Window.Main"] || {};
  var exports = $PS["Lib.Window.Main"];
  var $foreign = $PS["Lib.Window.Main"]; 
  var requestAnimationFrame = $foreign.requestAnimationFrameImpl;
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.PubSub.Main"] = $PS["Lib.PubSub.Main"] || {};
  var exports = $PS["Lib.PubSub.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Cont_Trans = $PS["Control.Monad.Cont.Trans"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Lib_Window_Main = $PS["Lib.Window.Main"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];                
  var tapIO = function (fn) {
      return function (mx) {
          return Control_Monad_Cont_Trans.ContT(function (ca) {
              return Control_Monad_Cont_Trans.runContT(mx)(function (a) {
                  return function __do() {
                      fn(a)();
                      return ca(a)();
                  };
              });
          });
      };
  };
  var merge = function (mxs) {
      return Control_Monad_Cont_Trans.ContT(function (ca) {
          return Data_Function.flip(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray))(mxs)(function (mx) {
              return Control_Monad_Cont_Trans.runContT(mx)(ca);
          });
      });
  };
  var joinIO = function (mmx) {
      return Control_Monad_Cont_Trans.ContT(function (ca) {
          return Control_Monad_Cont_Trans.runContT(mmx)(function (ma) {
              return Control_Bind.bind(Effect.bindEffect)(ma)(ca);
          });
      });
  };
  var fromRaf = function (w) {
      return Control_Monad_Cont_Trans.ContT(function (cn) {
          return Data_Functor["void"](Effect.functorEffect)((function () {
              var iter = function (n) {
                  return Data_Functor["void"](Effect.functorEffect)(function __do() {
                      cn(n)();
                      return Lib_Window_Main.requestAnimationFrame(iter)(w)();
                  });
              };
              return Lib_Window_Main.requestAnimationFrame(iter)(w);
          })());
      });
  };
  var fromEvent = function (eventType) {
      return function (target) {
          return Control_Monad_Cont_Trans.ContT(function (cb) {
              return function __do() {
                  var listener = Web_Event_EventTarget.eventListener(cb)();
                  return Web_Event_EventTarget.addEventListener(eventType)(listener)(false)(target)();
              };
          });
      };
  };
  var filterMap = function (fn) {
      return function (mx) {
          return Control_Monad_Cont_Trans.ContT(function (cb) {
              return Control_Monad_Cont_Trans.runContT(Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(fn)(mx))(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(cb));
          });
      };
  };
  var filter = function (fn) {
      return function (mx) {
          return Control_Monad_Cont_Trans.ContT(function (ca) {
              return Control_Monad_Cont_Trans.runContT(mx)(function (a) {
                  return Control_Applicative.when(Effect.applicativeEffect)(fn(a))(ca(a));
              });
          });
      };
  };
  var concat = function (mx) {
      return function (my) {
          return Control_Monad_Cont_Trans.ContT(function (cb) {
              return function __do() {
                  var ry = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  Control_Monad_Cont_Trans.runContT(my)(function (y) {
                      return Effect_Ref.write(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(y))(ry);
                  })();
                  return Control_Monad_Cont_Trans.runContT(mx)(function (x) {
                      return function __do() {
                          var my1 = Effect_Ref.read(ry)();
                          return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))((function () {
                              var $1 = Data_Tuple_Nested.tuple2(x);
                              return function ($2) {
                                  return cb($1($2));
                              };
                          })())(my1)();
                      };
                  })();
              };
          });
      };
  };
  var bind_ = function (mx) {
      return function (fn) {
          return Control_Monad_Cont_Trans.ContT(function (cb) {
              return Control_Monad_Cont_Trans.runContT(mx)(function (a) {
                  return Control_Monad_Cont_Trans.runContT(fn(a))(cb);
              });
          });
      };
  };
  var fold = function (step) {
      return function (seed) {
          return function (mx) {
              var ref = Effect_Unsafe.unsafePerformEffect(Effect_Ref["new"](seed));
              return merge([ bind_(mx)(function (x) {
                  return Control_Monad_Cont_Trans.ContT(function (cb) {
                      return function __do() {
                          var acc = Effect_Ref.modify(step(x))(ref)();
                          return cb(acc)();
                      };
                  });
              }), Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT(Effect.applicativeEffect))(seed) ]);
          };
      };
  };
  var delta = function (mx) {
      return Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.get2)(fold(function (curr) {
          return function (tx) {
              var prev = Data_Tuple_Nested.get1(tx);
              return Data_Tuple_Nested.tuple2(curr)(curr - prev);
          };
      })(Data_Tuple_Nested.tuple2(0.0)(0.0))(mx));
  };
  var bindIO = function (fn) {
      return function (mx) {
          return joinIO(Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(fn)(mx));
      };
  };
  exports["fromRaf"] = fromRaf;
  exports["fromEvent"] = fromEvent;
  exports["fold"] = fold;
  exports["merge"] = merge;
  exports["concat"] = concat;
  exports["filter"] = filter;
  exports["filterMap"] = filterMap;
  exports["delta"] = delta;
  exports["bindIO"] = bindIO;
  exports["tapIO"] = tapIO;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Uint8Array.Main

  exports.fromArrayImpl = function (xs) {
    return function () {
      return new Uint8Array(xs);
    };
  };

  exports.toArrayBufferImpl = function (xs) {
    return xs;
  };
})(PS["Lib.Uint8Array.Main"] = PS["Lib.Uint8Array.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Uint8Array.Main"] = $PS["Lib.Uint8Array.Main"] || {};
  var exports = $PS["Lib.Uint8Array.Main"];
  var $foreign = $PS["Lib.Uint8Array.Main"];
  var toArrayBuffer = $foreign.toArrayBufferImpl;
  var fromArray = $foreign.fromArrayImpl;
  exports["fromArray"] = fromArray;
  exports["toArrayBuffer"] = toArrayBuffer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.WebGL.Constants"] = $PS["Lib.Window.WebGL.Constants"] || {};
  var exports = $PS["Lib.Window.WebGL.Constants"];
  var vertexShader = 35633;
  var unsignedByte = 5121;   
  var triangles = 4;            
  var staticDraw = 35044;
  var linkStatus = 35714; 
  var fragmentShader = 35632;
  var $$float = 5126;       
  var depthTest = 2929;      
  var depthBufferBit = 256;
  var cullFace = 2884;                 
  var compileStatus = 35713; 
  var colorBufferBit = 16384;    
  var arrayBuffer = 34962;
  exports["arrayBuffer"] = arrayBuffer;
  exports["colorBufferBit"] = colorBufferBit;
  exports["compileStatus"] = compileStatus;
  exports["cullFace"] = cullFace;
  exports["depthBufferBit"] = depthBufferBit;
  exports["depthTest"] = depthTest;
  exports["float"] = $$float;
  exports["fragmentShader"] = fragmentShader;
  exports["linkStatus"] = linkStatus;
  exports["staticDraw"] = staticDraw;
  exports["triangles"] = triangles;
  exports["unsignedByte"] = unsignedByte;
  exports["vertexShader"] = vertexShader;
})(PS);
(function(exports) {
  'use strict';

  exports.attachShaderImpl = function (webgl, program, shader) {
    return function () {
      return webgl.attachShader(program, shader);
    };
  };

  exports.bindBufferImpl = function (webgl, target, buffer) {
    return function () {
      return webgl.bindBuffer(target, buffer);
    };
  };

  exports.bufferDataImpl = function (webgl, target, data, usage) {
    return function () {
      return webgl.bufferData(target, data, usage);
    };
  };

  exports.clearImpl = function (webgl, mask) {
    return function () {
      return webgl.clear(mask);
    };
  };

  exports.clearColorImpl = function (webgl, red, green, blue, alpha) {
    return function () {
      return webgl.clearColor(red, green, blue, alpha);
    };
  };

  exports.compileShaderImpl = function (webgl, shader) {
    return function () {
      return webgl.compileShader(shader);
    };
  };

  exports.createBufferImpl = function (webgl) {
    return function () {
      return webgl.createBuffer();
    };
  };

  exports.createProgramImpl = function (webgl) {
    return function () {
      return webgl.createProgram();
    };
  };

  exports.createShaderImpl = function (webgl, type) {
    return function () {
      return webgl.createShader(type);
    };
  };

  exports.deleteProgramImpl = function (webgl, program) {
    return function () {
      return webgl.deleteProgram(program);
    };
  };

  exports.deleteShaderImpl = function (webgl, shader) {
    return function () {
      return webgl.deleteShader(shader);
    };
  };

  exports.drawArraysImpl = function (webgl, mode, first, count) {
    return function () {
      return webgl.drawArrays(mode, first, count);
    };
  };

  exports.enableImpl = function (webgl, cap) {
    return function () {
      return webgl.enable(cap);
    };
  };

  exports.enableVertexAttribArrayImpl = function (webgl, index) {
    return function () {
      return webgl.enableVertexAttribArray(index);
    };
  };

  exports.getAttribLocationImpl = function (webgl, program, name) {
    return function () {
      return webgl.getAttribLocation(program, name);
    };
  };

  exports.getProgramParameterImpl = function (webgl, program, pname) {
    return function () {
      return webgl.getProgramParameter(program, pname);
    };
  };

  exports.getShaderParameterImpl = function (webgl, shader, pname) {
    return function () {
      return webgl.getShaderParameter(shader, pname);
    };
  };

  exports.getUniformLocationImpl = function (webgl, program, name) {
    return function () {
      return webgl.getUniformLocation(program, name);
    };
  };

  exports.linkProgramImpl = function (webgl, program) {
    return function () {
      return webgl.linkProgram(program);
    };
  };

  exports.shaderSourceImpl = function (webgl, shader, source) {
    return function () {
      return webgl.shaderSource(shader, source);
    };
  };

  exports.uniformMatrix4fvImpl = function (webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix4fv(location, transpose, value);
    };
  };

  exports.useProgramImpl = function (webgl, program) {
    return function () {
      return webgl.useProgram(program);
    };
  };

  exports.vertexAttribPointerImpl = function (
    webgl,
    indx,
    size,
    type,
    normalized,
    stride,
    offset
  ) {
    return function () {
      return webgl.vertexAttribPointer(
        indx,
        size,
        type,
        normalized,
        stride,
        offset
      );
    };
  };

  exports.viewportImpl = function (webgl, x, y, width, height) {
    return function () {
      return webgl.viewport(x, y, width, height);
    };
  };

  exports.getCanvasImpl = function(webgl) {
    return function() {
      return webgl.canvas;
    }
  }
})(PS["Lib.Window.WebGL.Main"] = PS["Lib.Window.WebGL.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.WebGL.Main"] = $PS["Lib.Window.WebGL.Main"] || {};
  var exports = $PS["Lib.Window.WebGL.Main"];
  var $foreign = $PS["Lib.Window.WebGL.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect = $PS["Effect"];
  var Lib_Maybe_Main = $PS["Lib.Maybe.Main"];                                
  var viewport = function (webgl) {
      return function (x) {
          return function (y) {
              return function (width) {
                  return function (height) {
                      return $foreign.viewportImpl(webgl, x, y, width, height);
                  };
              };
          };
      };
  };
  var vertexAttribPointer = function (webgl) {
      return function (indx) {
          return function (size) {
              return function (type$prime) {
                  return function (normalized) {
                      return function (stride) {
                          return function (offset) {
                              return $foreign.vertexAttribPointerImpl(webgl, indx, size, type$prime, normalized, stride, offset);
                          };
                      };
                  };
              };
          };
      };
  };
  var useProgram = function (webgl) {
      return function (program) {
          return $foreign.useProgramImpl(webgl, program);
      };
  };
  var uniformMatrix4fv = function (webgl) {
      return function (location) {
          return function (transpose) {
              return function (value) {
                  return $foreign.uniformMatrix4fvImpl(webgl, location, transpose, value);
              };
          };
      };
  };
  var shaderSource = function (webgl) {
      return function (shader) {
          return function (source) {
              return $foreign.shaderSourceImpl(webgl, shader, source);
          };
      };
  };
  var linkProgram = function (webgl) {
      return function (program) {
          return $foreign.linkProgramImpl(webgl, program);
      };
  };
  var getUniformLocation = function (webgl) {
      return function (program) {
          return function (name) {
              return Control_Bind.bind(Effect.bindEffect)($foreign.getUniformLocationImpl(webgl, program, name))((function () {
                  var $2 = Control_Applicative.pure(Effect.applicativeEffect);
                  return function ($3) {
                      return $2(Lib_Maybe_Main.from($3));
                  };
              })());
          };
      };
  };
  var getShaderParameter = function (webgl) {
      return function (shader) {
          return function (pname) {
              return Control_Bind.bind(Effect.bindEffect)($foreign.getShaderParameterImpl(webgl, shader, pname))((function () {
                  var $14 = Control_Applicative.pure(Effect.applicativeEffect);
                  return function ($15) {
                      return $14(Lib_Maybe_Main.from($15));
                  };
              })());
          };
      };
  };
  var getProgramParameter = function (webgl) {
      return function (program) {
          return function (pname) {
              return Control_Bind.bind(Effect.bindEffect)($foreign.getProgramParameterImpl(webgl, program, pname))((function () {
                  var $20 = Control_Applicative.pure(Effect.applicativeEffect);
                  return function ($21) {
                      return $20(Lib_Maybe_Main.from($21));
                  };
              })());
          };
      };
  };
  var getCanvas = $foreign.getCanvasImpl;
  var getAttribLocation = function (webgl) {
      return function (program) {
          return function (name) {
              return $foreign.getAttribLocationImpl(webgl, program, name);
          };
      };
  };
  var enableVertexAttribArray = function (webgl) {
      return function (index) {
          return $foreign.enableVertexAttribArrayImpl(webgl, index);
      };
  };
  var enable = function (webgl) {
      return function (cap) {
          return $foreign.enableImpl(webgl, cap);
      };
  };
  var drawArrays = function (webgl) {
      return function (mode) {
          return function (first) {
              return function (count) {
                  return $foreign.drawArraysImpl(webgl, mode, first, count);
              };
          };
      };
  };
  var deleteShader = function (webgl) {
      return function (shader) {
          return $foreign.deleteShaderImpl(webgl, shader);
      };
  };
  var deleteProgram = function (webgl) {
      return function (program) {
          return $foreign.deleteProgramImpl(webgl, program);
      };
  };
  var createShader = function (webgl) {
      return function (type$prime) {
          return Control_Bind.bind(Effect.bindEffect)($foreign.createShaderImpl(webgl, type$prime))((function () {
              var $42 = Control_Applicative.pure(Effect.applicativeEffect);
              return function ($43) {
                  return $42(Lib_Maybe_Main.from($43));
              };
          })());
      };
  };
  var createProgram = function (webgl) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.createProgramImpl(webgl))((function () {
          var $46 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($47) {
              return $46(Lib_Maybe_Main.from($47));
          };
      })());
  };
  var createBuffer = function (webgl) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.createBufferImpl(webgl))((function () {
          var $50 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($51) {
              return $50(Lib_Maybe_Main.from($51));
          };
      })());
  };
  var compileShader = function (webgl) {
      return function (shader) {
          return $foreign.compileShaderImpl(webgl, shader);
      };
  };
  var clearColor = function (webgl) {
      return function (red) {
          return function (green) {
              return function (blue) {
                  return function (alpha) {
                      return $foreign.clearColorImpl(webgl, red, green, blue, alpha);
                  };
              };
          };
      };
  };
  var clear = function (webgl) {
      return function (mask) {
          return $foreign.clearImpl(webgl, mask);
      };
  };
  var bufferData = function (webgl) {
      return function (target) {
          return function (data$prime) {
              return function (usage) {
                  return $foreign.bufferDataImpl(webgl, target, data$prime, usage);
              };
          };
      };
  };
  var bindBuffer = function (webgl) {
      return function (target) {
          return function (buffer) {
              return $foreign.bindBufferImpl(webgl, target, buffer);
          };
      };
  };
  var attachShader = function (webgl) {
      return function (program) {
          return function (shader) {
              return $foreign.attachShaderImpl(webgl, program, shader);
          };
      };
  };
  exports["attachShader"] = attachShader;
  exports["bindBuffer"] = bindBuffer;
  exports["bufferData"] = bufferData;
  exports["clear"] = clear;
  exports["clearColor"] = clearColor;
  exports["compileShader"] = compileShader;
  exports["createBuffer"] = createBuffer;
  exports["createProgram"] = createProgram;
  exports["createShader"] = createShader;
  exports["deleteProgram"] = deleteProgram;
  exports["deleteShader"] = deleteShader;
  exports["drawArrays"] = drawArrays;
  exports["enable"] = enable;
  exports["enableVertexAttribArray"] = enableVertexAttribArray;
  exports["getAttribLocation"] = getAttribLocation;
  exports["getProgramParameter"] = getProgramParameter;
  exports["getShaderParameter"] = getShaderParameter;
  exports["getUniformLocation"] = getUniformLocation;
  exports["linkProgram"] = linkProgram;
  exports["shaderSource"] = shaderSource;
  exports["uniformMatrix4fv"] = uniformMatrix4fv;
  exports["useProgram"] = useProgram;
  exports["vertexAttribPointer"] = vertexAttribPointer;
  exports["viewport"] = viewport;
  exports["getCanvas"] = getCanvas;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.WebGL.Main"] = $PS["Lib.WebGL.Main"] || {};
  var exports = $PS["Lib.WebGL.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Effect = $PS["Effect"];
  var Lib_Canvas_Main = $PS["Lib.Canvas.Main"];
  var Lib_ExceptT_Main = $PS["Lib.ExceptT.Main"];
  var Lib_Window_Canvas_Main = $PS["Lib.Window.Canvas.Main"];
  var Lib_Window_WebGL_Constants = $PS["Lib.Window.WebGL.Constants"];
  var Lib_Window_WebGL_Main = $PS["Lib.Window.WebGL.Main"];                
  var viewport = function (x) {
      return function (y) {
          return function (width) {
              return function (height) {
                  return function (webgl) {
                      return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.viewport(webgl)(x)(y)(width)(height));
                  };
              };
          };
      };
  };
  var vertexAttribPointer = function (indx) {
      return function (size) {
          return function (type$prime) {
              return function (normalized) {
                  return function (stride) {
                      return function (offset) {
                          return function (webgl) {
                              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.vertexAttribPointer(webgl)(indx)(size)(type$prime)(normalized)(stride)(offset));
                          };
                      };
                  };
              };
          };
      };
  };
  var useProgram = function (program) {
      return function (webgl) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.useProgram(webgl)(program));
      };
  };
  var uniformMatrix4fv = function (bx) {
      return function (xs) {
          return function (location) {
              return function (webgl) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.uniformMatrix4fv(webgl)(location)(bx)(xs));
              };
          };
      };
  };
  var getUniformLocation = function (name) {
      return function (program) {
          return function (webgl) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to locate uniform")(Lib_Window_WebGL_Main.getUniformLocation(webgl)(program)(name)))(function (uniform) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(uniform);
              });
          };
      };
  };
  var getCanvas = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.getCanvas(webgl)))(function (canvas) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(canvas);
      });
  };
  var getCanvasDimension = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(getCanvas(webgl))(function (canvas) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Canvas_Main.getDimension(canvas)))(function (dimension) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(dimension);
          });
      });
  };
  var getAttribLocation = function (name) {
      return function (program) {
          return function (webgl) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.getAttribLocation(webgl)(program)(name)))(function (attribute) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(attribute);
              });
          };
      };
  };
  var enableVertexAttribArray = function (index) {
      return function (webgl) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.enableVertexAttribArray(webgl)(index));
      };
  };
  var setAttributeConfig = function (config) {
      return function (webgl) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(enableVertexAttribArray(config.index)(webgl))(function () {
              return vertexAttribPointer(config.index)(config.size)(config.type)(config.normalize)(config.stride)(config.offset)(webgl);
          });
      };
  };
  var enable = function (cap) {
      return function (webgl) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.enable(webgl)(cap));
      };
  };
  var drawArrays = function (mode) {
      return function (first) {
          return function (count) {
              return function (webgl) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.drawArrays(webgl)(mode)(first)(count));
              };
          };
      };
  };
  var renderArray = function (config) {
      return function (webgl) {
          return drawArrays(config.mode)(config.first)(config.count)(webgl);
      };
  };
  var createVertexShader = function (source) {
      return function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to initialize vertex shader")(Lib_Window_WebGL_Main.createShader(webgl)(Lib_Window_WebGL_Constants.vertexShader)))(function (shader) {
              return Control_Monad_Error_Class.catchError(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.shaderSource(webgl)(shader)(source)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.compileShader(webgl)(shader)))(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to find status")(Lib_Window_WebGL_Main.getShaderParameter(webgl)(shader)(Lib_Window_WebGL_Constants.compileStatus)))(function (status) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(shader);
                      });
                  });
              }))(function (e) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.deleteShader(webgl)(shader)))(function () {
                      return Control_Monad_Except_Trans.except(Effect.applicativeEffect)(new Data_Either.Left(e));
                  });
              });
          });
      };
  };
  var createProgram = function (shaders) {
      return function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to create program")(Lib_Window_WebGL_Main.createProgram(webgl)))(function (program) {
              return Control_Monad_Error_Class.catchError(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Data_Function.flip(Data_Foldable.traverse_(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Foldable.foldableArray))(shaders)((function () {
                  var $0 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect);
                  var $1 = Lib_Window_WebGL_Main.attachShader(webgl)(program);
                  return function ($2) {
                      return $0($1($2));
                  };
              })()))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.linkProgram(webgl)(program)))(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to find status")(Lib_Window_WebGL_Main.getProgramParameter(webgl)(program)(Lib_Window_WebGL_Constants.linkStatus)))(function (status) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(program);
                      });
                  });
              }))(function (e) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.deleteProgram(webgl)(program)))(function () {
                      return Control_Monad_Except_Trans.except(Effect.applicativeEffect)(new Data_Either.Left(e));
                  });
              });
          });
      };
  };
  var createFragmentShader = function (source) {
      return function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to initialize fragment shader")(Lib_Window_WebGL_Main.createShader(webgl)(Lib_Window_WebGL_Constants.fragmentShader)))(function (shader) {
              return Control_Monad_Error_Class.catchError(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.shaderSource(webgl)(shader)(source)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.compileShader(webgl)(shader)))(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to find status")(Lib_Window_WebGL_Main.getShaderParameter(webgl)(shader)(Lib_Window_WebGL_Constants.compileStatus)))(function (status) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(shader);
                      });
                  });
              }))(function (e) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.deleteShader(webgl)(shader)))(function () {
                      return Control_Monad_Except_Trans.except(Effect.applicativeEffect)(new Data_Either.Left(e));
                  });
              });
          });
      };
  };
  var createBuffer = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to create buffer")(Lib_Window_WebGL_Main.createBuffer(webgl)))(function (buffer) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(buffer);
      });
  };
  var clearColor = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (webgl) {
                      return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.clearColor(webgl)(a)(b)(c)(d));
                  };
              };
          };
      };
  };
  var clear = function (x) {
      return function (webgl) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.clear(webgl)(x));
      };
  };
  var resetViewport = function (webgl) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(getCanvas(webgl))(function (canvas) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_Canvas_Main.resize(canvas)))(function () {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(getCanvasDimension(webgl))(function (dimension) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(viewport(0)(0)(Data_Int.floor(dimension.width))(Data_Int.floor(dimension.height))(webgl))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(clearColor(0.0)(0.0)(0.0)(0.0)(webgl))(function () {
                          return clear(Lib_Window_WebGL_Constants.colorBufferBit | Lib_Window_WebGL_Constants.depthBufferBit)(webgl);
                      });
                  });
              });
          });
      });
  };
  var bufferData = function (x) {
      return function (xs) {
          return function (z) {
              return function (webgl) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.bufferData(webgl)(x)(xs)(z));
              };
          };
      };
  };
  var putArrayBuffer = function (xs) {
      return function (webgl) {
          return bufferData(Lib_Window_WebGL_Constants.arrayBuffer)(xs)(Lib_Window_WebGL_Constants.staticDraw)(webgl);
      };
  };
  var bindBuffer = function (x) {
      return function (buffer) {
          return function (webgl) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Window_WebGL_Main.bindBuffer(webgl)(x)(buffer));
          };
      };
  };
  var setArrayBuffer = function (buffer) {
      return function (webgl) {
          return bindBuffer(Lib_Window_WebGL_Constants.arrayBuffer)(buffer)(webgl);
      };
  };
  exports["createProgram"] = createProgram;
  exports["createVertexShader"] = createVertexShader;
  exports["createFragmentShader"] = createFragmentShader;
  exports["createBuffer"] = createBuffer;
  exports["useProgram"] = useProgram;
  exports["getUniformLocation"] = getUniformLocation;
  exports["getAttribLocation"] = getAttribLocation;
  exports["getCanvasDimension"] = getCanvasDimension;
  exports["setArrayBuffer"] = setArrayBuffer;
  exports["putArrayBuffer"] = putArrayBuffer;
  exports["setAttributeConfig"] = setAttributeConfig;
  exports["renderArray"] = renderArray;
  exports["resetViewport"] = resetViewport;
  exports["uniformMatrix4fv"] = uniformMatrix4fv;
  exports["enable"] = enable;
})(PS);
(function(exports) {
  'use strict';

  // module Lib.Window.Image.Main

  exports.fromUrlImpl = function (url) {
    return function (onError, onSuccess) {
      try {
        const image = new Image();
        image.src = url;
        image.onload = () => onSuccess(image);
      } catch (e) {
        onError(e);
      }
      return function (error, onCancelError, onCancelSuccess) {
        onCancelSuccess();
      };
    };
  };
})(PS["Lib.Window.Image.Main"] = PS["Lib.Window.Image.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Lib.Window.Image.Main"] = $PS["Lib.Window.Image.Main"] || {};
  var exports = $PS["Lib.Window.Image.Main"];
  var $foreign = $PS["Lib.Window.Image.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var fromUrl = function (url) {
      return Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_Compat.fromEffectFnAff($foreign.fromUrlImpl(url)))(function (image) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right(image));
      }))(function (v) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create("Unable to load image from " + url));
      });
  };
  exports["fromUrl"] = fromUrl;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Pages.Shaders.Animation.Models.ShaderConfig.Main"] = $PS["Pages.Shaders.Animation.Models.ShaderConfig.Main"] || {};
  var exports = $PS["Pages.Shaders.Animation.Models.ShaderConfig.Main"];
  var Control_Category = $PS["Control.Category"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                
  var unit = {
      pause: 0,
      angle: 0.0,
      radius: 200.0,
      count: 1,
      fieldOfView: 60.0,
      scale: {
          x: 1.0,
          y: 1.0,
          z: 1.0
      },
      position: {
          x: 0.0,
          y: 0.0,
          z: -400.0
      },
      rotationSpeed: {
          x: 0.0,
          y: 0.0,
          z: 0.0
      }
  };
  var toDrawConfig = function (delta) {
      return function (sc) {
          return function (dc) {
              return {
                  angle: sc.angle,
                  radius: sc.radius,
                  count: sc.count,
                  fieldOfView: sc.fieldOfView,
                  scale: sc.scale,
                  position: sc.position,
                  rotation: {
                      x: dc.rotation.x + sc.rotationSpeed.x * delta,
                      y: dc.rotation.y + sc.rotationSpeed.y * delta,
                      z: dc.rotation.z + sc.rotationSpeed.z * delta
                  }
              };
          };
      };
  };
  var fromMap = function (mx) {
      return {
          pause: Data_Maybe.maybe(unit.pause)(Data_Int.floor)(Data_Map_Internal.lookup(Data_Ord.ordString)("pause")(mx)),
          angle: Data_Maybe.maybe(unit.angle)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("angle")(mx)),
          radius: Data_Maybe.maybe(unit.radius)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("radius")(mx)),
          count: Data_Maybe.maybe(unit.count)(Data_Int.floor)(Data_Map_Internal.lookup(Data_Ord.ordString)("count")(mx)),
          fieldOfView: Data_Maybe.maybe(unit.fieldOfView)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("fieldOfView")(mx)),
          scale: {
              x: Data_Maybe.maybe(unit.scale.x)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("scale.x")(mx)),
              y: Data_Maybe.maybe(unit.scale.y)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("scale.y")(mx)),
              z: Data_Maybe.maybe(unit.scale.z)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("scale.z")(mx))
          },
          position: {
              x: Data_Maybe.maybe(unit.position.x)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("position.x")(mx)),
              y: Data_Maybe.maybe(unit.position.y)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("position.y")(mx)),
              z: Data_Maybe.maybe(unit.position.z)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("position.z")(mx))
          },
          rotationSpeed: {
              x: Data_Maybe.maybe(unit.rotationSpeed.x)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("rotationSpeed.x")(mx)),
              y: Data_Maybe.maybe(unit.rotationSpeed.y)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("rotationSpeed.y")(mx)),
              z: Data_Maybe.maybe(unit.rotationSpeed.z)(Control_Category.identity(Control_Category.categoryFn))(Data_Map_Internal.lookup(Data_Ord.ordString)("rotationSpeed.z")(mx))
          }
      };
  };
  exports["unit"] = unit;
  exports["fromMap"] = fromMap;
  exports["toDrawConfig"] = toDrawConfig;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Shaders.Animation.Main"] = $PS["Shaders.Animation.Main"] || {};
  var exports = $PS["Shaders.Animation.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var Effect = $PS["Effect"];
  var Lib_Array_Main = $PS["Lib.Array.Main"];
  var Lib_Coordinate2d_Main = $PS["Lib.Coordinate2d.Main"];
  var Lib_Math_Main = $PS["Lib.Math.Main"];
  var Lib_Matrix_Main = $PS["Lib.Matrix.Main"];
  var Lib_Matrix4_Main = $PS["Lib.Matrix4.Main"];
  var Lib_WebGL_Main = $PS["Lib.WebGL.Main"];
  var Lib_Window_WebGL_Constants = $PS["Lib.Window.WebGL.Constants"];
  var $$Math = $PS["Math"];                
  var main = function (config) {
      return function (context) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getCanvasDimension(context.webgl))(function (canvas) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                  canvas: {
                      x: canvas.width,
                      y: canvas.height,
                      z: 400.0
                  }
              });
          }))(function (dimensions) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Lib_Matrix_Main.multiply(Lib_Matrix4_Main.perspective(Data_Tuple_Nested.tuple4(config.fieldOfView)(dimensions.canvas.x / dimensions.canvas.y)(1.0)(2000.0)))(Lib_Matrix_Main.invert((function (position) {
                  return Lib_Matrix4_Main.lookAt(position)(Data_Tuple_Nested.tuple3(config.radius + config.position.x)(config.position.y)(config.position.z))(Data_Tuple_Nested.tuple3(0.0)(1.0)(0.0));
              })(Lib_Matrix4_Main.toCameraPosition(Data_Foldable.foldl(Data_Foldable.foldableArray)(Lib_Matrix_Main.multiply)(Lib_Matrix4_Main.unit)([ Lib_Matrix4_Main.rotateY(Lib_Coordinate2d_Main.fromDegree(config.angle)), Lib_Matrix4_Main.translate(Data_Tuple_Nested.tuple3(0.0)(0.0)(config.radius * 2.0)) ])))))))(function (camera) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Functor.map(Data_Functor.functorArray)(function (a) {
                      return Data_Foldable.foldl(Data_Foldable.foldableArray)(Lib_Matrix_Main.multiply)(camera)([ Lib_Matrix4_Main.translate(Data_Tuple_Nested.tuple3($$Math.cos(a) * config.radius)(0.0)($$Math.sin(a) * config.radius)), Lib_Matrix4_Main.translate(Data_Tuple_Nested.tuple3(Lib_Math_Main.clamp(config.position.x)(0.0)(dimensions.canvas.x))(Lib_Math_Main.clamp(config.position.y)(0.0)(dimensions.canvas.y))(Lib_Math_Main.clamp(config.position.z)(0.0)(dimensions.canvas.z))), Lib_Matrix4_Main.rotateX(Lib_Coordinate2d_Main.fromDegree(config.rotation.x)), Lib_Matrix4_Main.rotateY(Lib_Coordinate2d_Main.fromDegree(config.rotation.y)), Lib_Matrix4_Main.rotateZ(Lib_Coordinate2d_Main.fromDegree(config.rotation.z)), Lib_Matrix4_Main.scale(Data_Tuple_Nested.tuple3(config.scale.x)(config.scale.y)(config.scale.z)) ]);
                  })(Data_Functor.map(Data_Functor.functorArray)(function (i) {
                      return (Data_Int.toNumber(i) * $$Math.pi * 2.0) / Data_Int.toNumber(config.count);
                  })(Data_Array.range(0)(config.count - 1 | 0))));
              }))(function (matrices) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.enable(Lib_Window_WebGL_Constants.cullFace)(context.webgl))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.enable(Lib_Window_WebGL_Constants.depthTest)(context.webgl))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.resetViewport(context.webgl))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.useProgram(context.program)(context.webgl))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setArrayBuffer(context.buffers.color)(context.webgl))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setAttributeConfig(context.attributes.color)(context.webgl))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setArrayBuffer(context.buffers.position)(context.webgl))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setAttributeConfig(context.attributes.position)(context.webgl))(function () {
                                                  return Data_Function.flip(Data_Foldable.traverse_(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Foldable.foldableArray))(matrices)(function (matrix) {
                                                      var mx = Data_Array.concat(Lib_Array_Main.transpose(matrix));
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.uniformMatrix4fv(false)(mx)(context.uniforms.matrix)(context.webgl))(function () {
                                                          return Data_Function.flip(Lib_WebGL_Main.renderArray)(context.webgl)({
                                                              mode: Lib_Window_WebGL_Constants.triangles,
                                                              first: 0,
                                                              count: 16 * 6 | 0
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  exports["main"] = main;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Shaders.Animation.Models.Context.Main"] = $PS["Shaders.Animation.Models.Context.Main"] || {};
  var exports = $PS["Shaders.Animation.Models.Context.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Lib_ExceptT_Main = $PS["Lib.ExceptT.Main"];
  var Lib_Float32Array_Main = $PS["Lib.Float32Array.Main"];
  var Lib_Graphics_Models_AlphabetF3d_Main = $PS["Lib.Graphics.Models.AlphabetF3d.Main"];
  var Lib_Graphics_Models_AlphabetF3dColor_Main = $PS["Lib.Graphics.Models.AlphabetF3dColor.Main"];
  var Lib_Uint8Array_Main = $PS["Lib.Uint8Array.Main"];
  var Lib_WebGL_Main = $PS["Lib.WebGL.Main"];
  var Lib_Window_Canvas_Main = $PS["Lib.Window.Canvas.Main"];
  var Lib_Window_WebGL_Constants = $PS["Lib.Window.WebGL.Constants"];                
  var vertexShaderSource = "\x0aattribute vec4 a_position;\x0aattribute vec4 a_color;\x0auniform mat4 u_matrix;\x0avarying vec4 v_color;\x0a\x0avoid main() {\x0a  gl_Position = u_matrix * a_position;\x0a  v_color = a_color;\x0a}\x0a";
  var fragmentShaderSource = "\x0aprecision mediump float;\x0a\x0avarying vec4 v_color;\x0a\x0avoid main() {\x0a   gl_FragColor = v_color;\x0a}\x0a";
  var fromEnv = function (env) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to create webgl context")(Lib_Window_Canvas_Main.getWebGLContext(env.canvas)))(function (webgl) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createVertexShader(vertexShaderSource)(webgl))(function (vertex) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createFragmentShader(fragmentShaderSource)(webgl))(function (fragment) {
                  return Lib_WebGL_Main.createProgram([ vertex, fragment ])(webgl);
              });
          }))(function (program) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getUniformLocation("u_matrix")(program)(webgl))(function (matrix) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                      matrix: matrix
                  });
              }))(function (uniforms) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getAttribLocation("a_position")(program)(webgl))(function (location) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                          index: location,
                          size: 3,
                          type: Lib_Window_WebGL_Constants["float"],
                          normalize: false,
                          stride: 0,
                          offset: 0
                      });
                  }))(function (position) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.getAttribLocation("a_color")(program)(webgl))(function (location) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                              index: location,
                              size: 3,
                              type: Lib_Window_WebGL_Constants.unsignedByte,
                              normalize: true,
                              stride: 0,
                              offset: 0
                          });
                      }))(function (color) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                              position: position,
                              color: color
                          });
                      });
                  }))(function (attributes) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createBuffer(webgl))(function (buffer) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Data_Functor.map(Effect.functorEffect)(Lib_Float32Array_Main.toArrayBuffer)(Lib_Float32Array_Main.fromArray(Lib_Graphics_Models_AlphabetF3d_Main.array))))(function (stream) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setArrayBuffer(buffer)(webgl))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.putArrayBuffer(stream)(webgl))(function () {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(buffer);
                                  });
                              });
                          });
                      }))(function (position) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.createBuffer(webgl))(function (buffer) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Data_Functor.map(Effect.functorEffect)(Lib_Uint8Array_Main.toArrayBuffer)(Lib_Uint8Array_Main.fromArray(Lib_Graphics_Models_AlphabetF3dColor_Main.array))))(function (stream) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.setArrayBuffer(buffer)(webgl))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_WebGL_Main.putArrayBuffer(stream)(webgl))(function () {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(buffer);
                                      });
                                  });
                              });
                          }))(function (color) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                                  position: position,
                                  color: color
                              });
                          });
                      }))(function (buffers) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))({
                              webgl: webgl,
                              program: program,
                              uniforms: uniforms,
                              attributes: attributes,
                              buffers: buffers
                          });
                      });
                  });
              });
          });
      });
  };
  exports["fromEnv"] = fromEnv;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Shaders.Animation.Models.DrawConfig.Main"] = $PS["Shaders.Animation.Models.DrawConfig.Main"] || {};
  var exports = $PS["Shaders.Animation.Models.DrawConfig.Main"];
  var unit = {
      angle: 0.0,
      radius: 200.0,
      count: 1,
      fieldOfView: 60.0,
      scale: {
          x: 1.0,
          y: 1.0,
          z: 1.0
      },
      position: {
          x: 0.0,
          y: 0.0,
          z: -400.0
      },
      rotation: {
          x: 0.0,
          y: 0.0,
          z: 0.0
      }
  };
  exports["unit"] = unit;
})(PS);
(function(exports) {
  "use strict";

  exports._target = function (e) {
    return e.target;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var target = function ($1) {
      return Data_Nullable.toMaybe($foreign["_target"]($1));
  };
  exports["target"] = target;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toElement"] = toElement;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                  
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromEventTarget"] = fromEventTarget;
  exports["value"] = $foreign.value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Pages.Shaders.Animation.Main"] = $PS["Pages.Shaders.Animation.Main"] || {};
  var exports = $PS["Pages.Shaders.Animation.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Cont_Trans = $PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Number = $PS["Data.Number"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Lib_Canvas_Main = $PS["Lib.Canvas.Main"];
  var Lib_Element_Main = $PS["Lib.Element.Main"];
  var Lib_ExceptT_Main = $PS["Lib.ExceptT.Main"];
  var Lib_Map_Main = $PS["Lib.Map.Main"];
  var Lib_PubSub_Main = $PS["Lib.PubSub.Main"];
  var Lib_Window_Image_Main = $PS["Lib.Window.Image.Main"];
  var Pages_Shaders_Animation_Models_ShaderConfig_Main = $PS["Pages.Shaders.Animation.Models.ShaderConfig.Main"];
  var Shaders_Animation_Main = $PS["Shaders.Animation.Main"];
  var Shaders_Animation_Models_Context_Main = $PS["Shaders.Animation.Models.Context.Main"];
  var Shaders_Animation_Models_DrawConfig_Main = $PS["Shaders.Animation.Models.DrawConfig.Main"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var main = function __do() {
      var window = Web_HTML.window();
      var document = Web_HTML_Window.document(window)();
      Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.ExceptT(Lib_Window_Image_Main.fromUrl("/assets/images/kskkido_1.jpg")))(function (image) {
          return Control_Monad_Except_Trans.mapExceptT(Effect_Class.liftEffect(Effect_Aff.monadEffectAff))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to locate body")(Web_HTML_HTMLDocument.body(document)))(function (body) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Lib_ExceptT_Main.fromMaybeTrans(Effect.monadEffect)("Unable to locate canvas")(Graphics_Canvas.getCanvasElementById("canvas")))(function (canvas) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Lib_Canvas_Main.getDimension(canvas)))(function (dimension) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(Effect_Console.log("Found canvas")))(function () {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Shaders_Animation_Models_Context_Main.fromEnv({
                              canvas: canvas
                          }))(function (context) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(function __do() {
                                  var angle = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(-360 | 0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(360))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.angle))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showNumber)(1.0e-2))(input)();
                                      Lib_Element_Main.setTextContent("angle: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var radius = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(400))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.radius))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showNumber)(0.1))(input)();
                                      Lib_Element_Main.setTextContent("radius: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var count = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(1))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(150))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showInt)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.count))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showInt)(1))(input)();
                                      Lib_Element_Main.setTextContent("count: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var fieldOfView = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(180))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.fieldOfView))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showNumber)(0.1))(input)();
                                      Lib_Element_Main.setTextContent("fieldOfView: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var x = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showNumber)(-dimension.width))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showNumber)(dimension.width))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.position.x))(input)();
                                      Lib_Element_Main.setTextContent("x: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var y = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showNumber)(-dimension.height))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showNumber)(dimension.height))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.position.y))(input)();
                                      Lib_Element_Main.setTextContent("y: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var z = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showNumber)(-400.0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showNumber)(400.0))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.position.z))(input)();
                                      Lib_Element_Main.setTextContent("z: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var scaleX = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(-2 | 0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(2))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.scale.x))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showNumber)(1.0e-2))(input)();
                                      Lib_Element_Main.setTextContent("scaleX: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var scaleY = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(-2 | 0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(2))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.scale.y))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showNumber)(1.0e-2))(input)();
                                      Lib_Element_Main.setTextContent("scaleY: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var scaleZ = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(-2 | 0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(2))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.scale.z))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showNumber)(1.0e-2))(input)();
                                      Lib_Element_Main.setTextContent("scaleZ: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var rotationSpeedX = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(360))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.rotationSpeed.x))(input)();
                                      Lib_Element_Main.setTextContent("rotationSpeedX: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var rotationSpeedY = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(360))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.rotationSpeed.y))(input)();
                                      Lib_Element_Main.setTextContent("rotationSpeedY: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var rotationSpeedZ = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(360))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showNumber)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.rotationSpeed.z))(input)();
                                      Lib_Element_Main.setTextContent("rotationSpeedZ: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var pause = (function __do() {
                                      var field = Lib_Element_Main.fromTag("div")(window)();
                                      var fieldLabel = Lib_Element_Main.fromTag("div")(window)();
                                      var input = Lib_Element_Main.fromTag("input")(window)();
                                      var value = Lib_Element_Main.fromTag("span")(window)();
                                      var label = Lib_Element_Main.fromTag("span")(window)();
                                      Lib_Element_Main.addClass("field")(field)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ fieldLabel, input ]))(field)();
                                      Lib_Element_Main.addClass("field-label")(fieldLabel)();
                                      Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ label, value ]))(fieldLabel)();
                                      Web_DOM_Element.setAttribute("type")("range")(input)();
                                      Web_DOM_Element.setAttribute("min")(Data_Show.show(Data_Show.showInt)(0))(input)();
                                      Web_DOM_Element.setAttribute("max")(Data_Show.show(Data_Show.showInt)(1))(input)();
                                      Web_DOM_Element.setAttribute("value")(Data_Show.show(Data_Show.showInt)(Pages_Shaders_Animation_Models_ShaderConfig_Main.unit.pause))(input)();
                                      Web_DOM_Element.setAttribute("step")(Data_Show.show(Data_Show.showInt)(1))(input)();
                                      Lib_Element_Main.setTextContent("pause: ")(label)();
                                      return {
                                          field: field,
                                          input: input,
                                          value: value
                                      };
                                  })();
                                  var container = Lib_Element_Main.fromTag("div")(window)();
                                  Lib_Element_Main.addClass("gl-controller")(container)();
                                  Lib_Element_Main.append(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ container ]))(Web_HTML_HTMLElement.toElement(body))();
                                  Data_Function.flip(Lib_Element_Main.append)(container)(Data_Functor.map(Data_Functor.functorArray)(Web_DOM_Element.toNode)([ pause.field, angle.field, radius.field, count.field, fieldOfView.field, x.field, y.field, z.field, scaleX.field, scaleY.field, scaleZ.field, rotationSpeedX.field, rotationSpeedY.field, rotationSpeedZ.field ]))();
                                  return {
                                      container: container,
                                      angle: angle,
                                      radius: radius,
                                      count: count,
                                      fieldOfView: fieldOfView,
                                      x: x,
                                      y: y,
                                      z: z,
                                      scaleX: scaleX,
                                      scaleY: scaleY,
                                      scaleZ: scaleZ,
                                      rotationSpeedX: rotationSpeedX,
                                      rotationSpeedY: rotationSpeedY,
                                      rotationSpeedZ: rotationSpeedZ,
                                      pause: pause
                                  };
                              }))(function (controller) {
                                  return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect.monadEffect)(function __do() {
                                      var subscribe = Control_Monad_Cont_Trans.runContT(Lib_PubSub_Main.fold(function (tx) {
                                          return function (config) {
                                              var d = Data_Tuple_Nested.get1(tx);
                                              var c = Data_Tuple_Nested.get2(tx);
                                              return Pages_Shaders_Animation_Models_ShaderConfig_Main.toDrawConfig(d)(c)(config);
                                          };
                                      })(Shaders_Animation_Models_DrawConfig_Main.unit)(Lib_PubSub_Main.filter(function (tx) {
                                          var c = Data_Tuple_Nested.get2(tx);
                                          return c.pause < 1;
                                      })(Lib_PubSub_Main.concat(Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(function (x) {
                                          return x * 1.0e-3;
                                      })(Lib_PubSub_Main.delta(Lib_PubSub_Main.fromRaf(window))))(Lib_PubSub_Main.tapIO(function (config) {
                                          return function __do() {
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showInt)(config.pause))(controller.pause.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.angle))(controller.angle.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.radius))(controller.radius.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showInt)(config.count))(controller.count.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.fieldOfView))(controller.fieldOfView.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.position.x))(controller.x.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.position.y))(controller.y.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.position.z))(controller.z.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.scale.x))(controller.scaleX.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.scale.y))(controller.scaleY.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.scale.z))(controller.scaleZ.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.rotationSpeed.x))(controller.rotationSpeedX.value)();
                                              Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.rotationSpeed.y))(controller.rotationSpeedY.value)();
                                              return Lib_Element_Main.setTextContent(Data_Show.show(Data_Show.showNumber)(config.rotationSpeed.z))(controller.rotationSpeedZ.value)();
                                          };
                                      })(Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Pages_Shaders_Animation_Models_ShaderConfig_Main.fromMap)(Lib_PubSub_Main.fold(Lib_Map_Main.insert(Data_Ord.ordString))(Data_Map_Internal.empty)(Lib_PubSub_Main.merge([ Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("pause"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.pause.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("angle"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.angle.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("radius"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.radius.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("count"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.count.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("fieldOfView"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.fieldOfView.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("position.x"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.x.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("position.y"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.y.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("position.z"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.z.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("scale.x"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.scaleX.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("scale.y"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.scaleY.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("scale.z"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.scaleZ.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("rotationSpeed.x"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.rotationSpeedX.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("rotationSpeed.y"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.rotationSpeedY.input))))))), Data_Functor.map(Control_Monad_Cont_Trans.functorContT(Effect.functorEffect))(Data_Tuple_Nested.tuple2("rotationSpeed.z"))(Lib_PubSub_Main.filterMap(Data_Number.fromString)(Lib_PubSub_Main.bindIO(Web_HTML_HTMLInputElement.value)(Lib_PubSub_Main.filterMap(Web_HTML_HTMLInputElement.fromEventTarget)(Lib_PubSub_Main.filterMap(Web_Event_Event.target)(Lib_PubSub_Main.fromEvent("input")(Web_DOM_Element.toEventTarget(controller.rotationSpeedZ.input))))))) ]))))))));
                                      return subscribe(function (config) {
                                          return function __do() {
                                              var result = Control_Monad_Except_Trans.runExceptT(Shaders_Animation_Main.main(config)(context))();
                                              return Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Data_Either.either(function ($0) {
                                                  return Effect_Exception.throwException(Effect_Exception.error($0));
                                              })(Control_Applicative.pure(Effect.applicativeEffect))(result))();
                                          };
                                      })();
                                  });
                              });
                          });
                      });
                  });
              });
          }));
      })))(function (result) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Either.either(function ($1) {
              return Effect_Exception.throwException(Effect_Exception.error($1));
          })(Control_Applicative.pure(Effect.applicativeEffect))(result));
      }))();
      return Effect_Console.log("\ud83c\udf5d")();
  };
  exports["main"] = main;
})(PS);
PS["Pages.Shaders.Animation.Main"].main();